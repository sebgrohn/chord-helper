{"version":3,"sources":["Theory/notes.ts","Theory/chords.ts","Components/FormattedChord.tsx","Components/FormattedNote.tsx","Components/FormattedNotes.tsx","Components/ChordDefinition.tsx","Theory/chords.guitar.ts","Theory/tunings.guitar.ts","Components/StringChord.tsx","Components/ChordCard.tsx","Components/EmptyChordCard.tsx","Components/ChordCardCollection.tsx","Components/ChordSelector.tsx","Components/ChordSet.tsx","Components/ChordSetCollection.tsx","Hooks/useStoringReducer.ts","Store/migrations.ts","Store/reducer.ts","theme.ts","App.tsx","Store/selectors.ts","Store/actions.ts","reportWebVitals.ts","index.tsx"],"names":["noteNames","notePattern","getNoteParts","note","exec","noteName","octave","Number","parseInt","transposeNoteName","Math","pow","semitoneDistance","index","indexOf","chordDefinitions","maj6","dom7","maj7","aug","aug7","min","min6","min7","chordNamePattern","getChordNameParts","chordName","ChordModifier","styled","span","theme","global","borderSize","small","FormattedChord","chord","rootNoteName","hash","chordModifier","FormattedNote","FormattedNotes","notes","map","n","i","ChordDefinition","isEditing","onRemoveChord","chordNotes","x","getChordNotes","Card","pad","horizontal","vertical","background","border","side","color","Heading","level","size","margin","Box","direction","gap","align","top","Text","Collapsible","open","Button","icon","Trash","a11yTitle","onClick","chords","guitar","type","positions","mutedStrings","tunings","guitalele","PushedFingerBox","NoteCircleText","NoteBox","isStringMuted","isActive","colors","dark","isVisible","css","disabled","isPushed","getGridArea","x1","y1","x2","y2","StringChord","instrument","highlightedNote","onHighlightNote","chordDefinition","find","c","stringPositionsParts","stringPositions","pos","fingerIndex","filter","stringIdOrInterval","fretId","Array","isArray","startStringId","endStringId","getStringPositionsParts","maxFretId","reduce","acc","max","tuning","maxStringIndex","length","strings","_","stringIndex","gridArea","isMuted","includes","frets","fill","undefined","isStart","finger","stringNote","stringId","getNoteFromParts","sign","floor","abs","transposeNote","isHighlighted","Grid","columns","rows","row","alignSelf","s","justify","textAlign","Close","ChordCard","width","CardHeader","CardBody","EmptyChordCard","Stack","interactiveChild","opacity","Add","ChordCardCollection","useState","setHighlightedNote","ChordSelector","onAddChord","onIsEditingChange","searchString","setSearchString","matchingChords","useMemo","label","value","toLowerCase","handleChange","useCallback","Select","options","valueKey","key","labelKey","closeOnChange","placeholder","searchPlaceholder","onSearch","onChange","Checkmark","Edit","primary","ChordSet","name","description","selectedChords","availableChords","onSetName","onSetDescription","setIsEditing","filteredChords","TextInput","plain","event","target","ChordSetCollection","chordSets","newName","newDescription","chordToAdd","chordToRemove","useStoringReducer","reducer","migrateState","initialState","initializer","storingReducer","writeTimeoutRef","state","action","newState","window","clearTimeout","setTimeout","localStorage","setItem","JSON","stringify","console","log","version","error","createStoringReducer","readState","rawState","getItem","parse","readStoredState","migratedState","useReducer","migrations","rest","migration","chordSetReducer","chordSetIndex","newChordSet","slice","deepMerge","grommet","black","white","brand","font","family","face","heading","button","radius","card","container","round","elevation","App","dispatch","selectors","handleSetChordSetName","actions","handleSetChordSetDescription","handleAddChordFromSet","handleRemoveChordFromSet","Grommet","themeMode","Header","Main","Footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4af1d945.chunk.js","sourcesContent":["export type NoteName =\r\n  | 'C'\r\n  | 'C#'\r\n  | 'D'\r\n  | 'D#'\r\n  | 'E'\r\n  | 'F'\r\n  | 'F#'\r\n  | 'G'\r\n  | 'G#'\r\n  | 'A'\r\n  | 'A#'\r\n  | 'B';\r\n\r\nexport type OctaveNumber = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\r\n\r\nexport type Note = `${NoteName}${OctaveNumber}`;\r\n\r\nconst noteNames: NoteName[] = [\r\n  'C',\r\n  'C#',\r\n  'D',\r\n  'D#',\r\n  'E',\r\n  'F',\r\n  'F#',\r\n  'G',\r\n  'G#',\r\n  'A',\r\n  'A#',\r\n  'B',\r\n];\r\n\r\n// https://en.wikipedia.org/wiki/Interval_(music)#Main_intervals\r\nexport const intervalNames: Record<number, string> = {\r\n  0: 'perfect unison',\r\n  1: 'minor second',\r\n  2: 'major second',\r\n  3: 'minor third',\r\n  4: 'major third',\r\n  5: 'perfect fourth',\r\n  6: 'augmented fourth/diminished fifth',\r\n  7: 'perfect fifth',\r\n  8: 'minor sixth',\r\n  9: 'major sixth',\r\n  10: 'minor seventh',\r\n  11: 'major seventh',\r\n  12: 'perfect octave',\r\n};\r\n\r\nconst notePattern = /^\\s*([A-G]#?)(\\d)\\s*$/;\r\n\r\nexport const getNoteParts = (note: Note): [NoteName, OctaveNumber] => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, noteName, octave] = notePattern.exec(note) ?? [];\r\n  return [noteName as NoteName, Number.parseInt(octave) as OctaveNumber];\r\n};\r\n\r\nconst getNoteFromParts = (noteName: NoteName, octave: OctaveNumber): Note =>\r\n  `${noteName}${octave}` as Note;\r\n\r\nexport const isValidNote = (noteString: string): noteString is Note =>\r\n  notePattern.test(noteString);\r\n\r\nexport const getSemitoneDistance = (note1: Note, note2: Note): number => {\r\n  const [noteName1, octave1] = getNoteParts(note1);\r\n  const [noteName2, octave2] = getNoteParts(note2);\r\n  return (\r\n    12 * (octave2 - octave1) +\r\n    (noteNames.indexOf(noteName2) - noteNames.indexOf(noteName1))\r\n  );\r\n};\r\n\r\n// https://en.wikipedia.org/wiki/A440_(pitch_standard)\r\nconst standardPitch = {\r\n  note: 'A4' as Note,\r\n  frequency: 440, // Hz\r\n  semiToneRatio: Math.pow(2, 1 / 12),\r\n};\r\n\r\nexport const getNotePitch = (note: Note): number => {\r\n  const semitoneDistanceFromStandard = getSemitoneDistance(\r\n    standardPitch.note,\r\n    note,\r\n  );\r\n  return (\r\n    standardPitch.frequency *\r\n    Math.pow(standardPitch.semiToneRatio, semitoneDistanceFromStandard)\r\n  );\r\n};\r\n\r\nexport const transposeNoteName = (\r\n  noteName: NoteName,\r\n  semitoneDistance: number,\r\n) => {\r\n  const index = noteNames.indexOf(noteName);\r\n  const transposedIndex = (index + semitoneDistance) % 12;\r\n  return noteNames[transposedIndex];\r\n};\r\n\r\nexport const transposeNote = (note: Note, semitoneDistance: number) => {\r\n  const [noteName, octave] = getNoteParts(note);\r\n  const transposedNoteName = transposeNoteName(noteName, semitoneDistance);\r\n  const octaveDistance =\r\n    Math.sign(semitoneDistance) * Math.floor(Math.abs(semitoneDistance) / 12);\r\n  return getNoteFromParts(\r\n    transposedNoteName,\r\n    (octave + octaveDistance) as OctaveNumber,\r\n  );\r\n};\r\n","import { NoteName, transposeNoteName } from './notes';\r\n\r\nexport type ChordModifier =\r\n  | ''\r\n  | 'maj6'\r\n  | 'dom7'\r\n  | 'maj7'\r\n  | 'aug'\r\n  | 'aug7'\r\n  | 'min'\r\n  | 'min6'\r\n  | 'min7'; // ...more\r\n\r\nexport type ChordName = `${NoteName}${ChordModifier}`;\r\n\r\nexport type ChordDefinition = (\r\n  | 0\r\n  | 1\r\n  | 2\r\n  | 3\r\n  | 4\r\n  | 5\r\n  | 6\r\n  | 7\r\n  | 8\r\n  | 9\r\n  | 10\r\n  | 11\r\n)[];\r\n\r\n// https://en.wikipedia.org/wiki/Chord_(music)#Examples\r\nconst chordDefinitions: Record<ChordModifier, ChordDefinition> = {\r\n  '': [0, 4, 7], // major\r\n  maj6: [0, 4, 7, 9], // major 6th\r\n  dom7: [0, 4, 7, 10], // dominant 7th\r\n  maj7: [0, 4, 7, 11], // major 7th\r\n\r\n  aug: [0, 4, 8], // augmented\r\n  aug7: [0, 4, 8, 10], //augmented 7th\r\n\r\n  min: [0, 3, 7], // minor\r\n  min6: [0, 3, 7, 9], // minor 6th\r\n  min7: [0, 3, 7, 10], // minor 7th\r\n};\r\n\r\nconst chordNamePattern =\r\n  /^\\s*([A-G]#?)(|maj6|dom7|maj7|aug|aug7|min|min6|min7)\\s*$/;\r\n\r\nconst getChordNameParts = (chordName: ChordName): [NoteName, ChordModifier] => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, rootNoteName, chordModifier] =\r\n    chordNamePattern.exec(chordName) ?? [];\r\n  return [rootNoteName as NoteName, chordModifier as ChordModifier];\r\n};\r\n\r\nconst getChordNameFromParts = (\r\n  rootNoteName: NoteName,\r\n  chordModifier: ChordModifier,\r\n): ChordName => `${rootNoteName}${chordModifier}` as ChordName;\r\n\r\nexport const isValidChordName = (\r\n  chordNameString: string,\r\n): chordNameString is ChordName => chordNamePattern.test(chordNameString);\r\n\r\nexport const getChordNotes = (chordName: ChordName): NoteName[] => {\r\n  const [rootNoteName, chordModifier] = getChordNameParts(chordName);\r\n  const chordDefinition = chordDefinitions[chordModifier];\r\n  return chordDefinition.map((x) => transposeNoteName(rootNoteName, x));\r\n};\r\n\r\nexport const transposeChord = (\r\n  chordName: ChordName,\r\n  semitoneDistance: number,\r\n): ChordName => {\r\n  const [rootNoteName, chordModifier] = getChordNameParts(chordName);\r\n  const transposedNoteName = transposeNoteName(rootNoteName, semitoneDistance);\r\n  return getChordNameFromParts(transposedNoteName, chordModifier);\r\n};\r\n","import styled from 'styled-components';\r\nimport { ChordName } from '../Theory/chords';\r\n\r\nconst chordNamePattern =\r\n  /^\\s*([A-G])(#)?(|maj6|dom7|maj7|aug|aug7|min|min6|min7)\\s*$/;\r\n\r\nconst getNoteParts = (chord: ChordName) => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, rootNoteName, hash, chordModifier] =\r\n    chordNamePattern.exec(chord) ?? [];\r\n  return [rootNoteName, hash, chordModifier];\r\n};\r\n\r\nconst ChordModifier = styled.span`\r\n  padding-left: ${({ theme }) => theme.global.borderSize.small};\r\n`;\r\n\r\nexport interface Props {\r\n  chord: ChordName | undefined;\r\n}\r\n\r\nconst FormattedChord = ({ chord }: Props) => {\r\n  const [rootNoteName, hash, chordModifier] = chord ? getNoteParts(chord) : [];\r\n  return (\r\n    <span>\r\n      {rootNoteName || <>&nbsp;</>}\r\n      <sup>{hash && '♯'}</sup>\r\n      {chordModifier && <ChordModifier>{chordModifier}</ChordModifier>}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default FormattedChord;\r\n","import { Note, NoteName } from '../Theory/notes';\r\n\r\nconst notePattern = /^\\s*([A-G])(#)?(\\d)?\\s*$/;\r\n\r\nconst getNoteParts = (note: Note | NoteName) => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, noteName, hash, octave] = notePattern.exec(note) ?? [];\r\n  return [noteName, hash, octave];\r\n};\r\n\r\nexport interface Props {\r\n  note: Note | NoteName;\r\n}\r\n\r\nconst FormattedNote = ({ note }: Props) => {\r\n  const [noteName, hash, octave] = getNoteParts(note);\r\n  return (\r\n    <span>\r\n      {noteName}\r\n      <sup>{hash && '♯'}</sup>\r\n      {octave && <sub>{octave}</sub>}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default FormattedNote;\r\n","import { Fragment } from 'react';\r\nimport { Note, NoteName } from '../Theory/notes';\r\nimport FormattedNote from './FormattedNote';\r\n\r\nexport interface Props {\r\n  notes: (Note | NoteName)[];\r\n}\r\n\r\nconst FormattedNotes = ({ notes }: Props) => (\r\n  <>\r\n    {notes.map((n, i) => (\r\n      <Fragment key={n}>\r\n        {i !== 0 && ' '}\r\n        <FormattedNote note={n} />\r\n      </Fragment>\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default FormattedNotes;\r\n","import { Box, Button, Card, Collapsible, Heading, Text } from 'grommet';\r\nimport { Trash } from 'grommet-icons';\r\nimport { ChordName, getChordNotes } from '../Theory/chords';\r\nimport FormattedChord from './FormattedChord';\r\nimport FormattedNotes from './FormattedNotes';\r\n\r\nexport interface Props {\r\n  chord: ChordName | undefined;\r\n  isEditing: boolean;\r\n  onRemoveChord: (() => void) | undefined;\r\n}\r\n\r\nconst ChordDefinition = ({ chord, isEditing, onRemoveChord }: Props) => {\r\n  const chordNotes = chord ? getChordNotes(chord) : [];\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        pad={{ horizontal: 'medium', vertical: 'small' }}\r\n        background=\"background-front\"\r\n        border={{ side: 'right', color: 'background-contrast' }}\r\n      >\r\n        <Heading level={3} size=\"medium\" color=\"accent-1\" margin=\"none\">\r\n          <FormattedChord chord={chord} />\r\n        </Heading>\r\n      </Card>\r\n      <Box\r\n        direction=\"row\"\r\n        pad={{ horizontal: 'small' }}\r\n        gap=\"small\"\r\n        align=\"center\"\r\n      >\r\n        <Box pad={{ top: 'xsmall' }}>\r\n          <Text>\r\n            <FormattedNotes notes={chordNotes} />\r\n          </Text>\r\n        </Box>\r\n        <Collapsible open={isEditing} direction=\"horizontal\">\r\n          <Button\r\n            icon={<Trash />}\r\n            a11yTitle={`Remove chord ${chord}`}\r\n            onClick={onRemoveChord}\r\n          />\r\n        </Collapsible>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChordDefinition;\r\n","import { ChordName } from './chords';\r\nimport { InstrumentName } from './tunings.guitar';\r\n\r\nexport type ChordType = 'simple' | 'barre';\r\n\r\n/**\r\n * 1 = lowest string, 6 = highest string.\r\n */\r\nexport type StringId = 1 | 2 | 3 | 4 | 5 | 6;\r\n\r\ntype StringInterval = [\r\n  /** From string (inclusive) */\r\n  StringId,\r\n  /** To string (inclusive) */\r\n  StringId,\r\n];\r\n\r\nexport type FretId =\r\n  | 1\r\n  | 2\r\n  | 3\r\n  | 4\r\n  | 5\r\n  | 6\r\n  | 7\r\n  | 8\r\n  | 9\r\n  | 10\r\n  | 11\r\n  | 12\r\n  | 13\r\n  | 14\r\n  | 15\r\n  | 16\r\n  | 17\r\n  | 18\r\n  | 19;\r\n\r\ntype StringPosition = [StringId | StringInterval, FretId];\r\n\r\n/**\r\n * String and fret position (or null for unused), per finger (index -> pinky).\r\n */\r\ntype StringPositions = [\r\n  /** Index finger */\r\n  StringPosition | null,\r\n  /** Middle finger */\r\n  StringPosition | null,\r\n  /** Ring finger */\r\n  StringPosition | null,\r\n  /** Pinky finger */\r\n  StringPosition | null,\r\n];\r\n\r\nexport interface ChordDefinition {\r\n  chord: ChordName;\r\n  type: ChordType;\r\n  positions: StringPositions;\r\n  mutedStrings: StringId[];\r\n}\r\n\r\nconst chords: Partial<Record<InstrumentName, ChordDefinition[]>> = {\r\n  guitar: [\r\n    {\r\n      chord: 'C',\r\n      type: 'simple',\r\n      positions: [[5, 1], [3, 2], [2, 3], null],\r\n      mutedStrings: [1],\r\n    },\r\n    // { chord: 'Cmin', type: '', positions: [], mutedStrings: [] },\r\n    {\r\n      chord: 'D',\r\n      type: 'simple',\r\n      positions: [[4, 2], [6, 2], [5, 3], null],\r\n      mutedStrings: [1, 2],\r\n    },\r\n    {\r\n      chord: 'Dmin',\r\n      type: 'simple',\r\n      positions: [[6, 1], [4, 2], [5, 3], null],\r\n      mutedStrings: [1, 2],\r\n    },\r\n    {\r\n      chord: 'E',\r\n      type: 'simple',\r\n      positions: [[4, 1], [2, 2], [3, 2], null],\r\n      mutedStrings: [],\r\n    },\r\n    {\r\n      chord: 'Emin',\r\n      type: 'simple',\r\n      positions: [null, [2, 2], [3, 2], null],\r\n      mutedStrings: [],\r\n    },\r\n    {\r\n      chord: 'F',\r\n      type: 'barre',\r\n      positions: [\r\n        [[1, 6], 1],\r\n        [4, 2],\r\n        [2, 3],\r\n        [3, 3],\r\n      ],\r\n      mutedStrings: [],\r\n    },\r\n    // { chord: 'Fmin', type: '', positions: [], mutedStrings: [] },\r\n    {\r\n      chord: 'G',\r\n      type: 'simple',\r\n      positions: [[2, 2], [1, 3], [6, 3], null],\r\n      mutedStrings: [],\r\n    },\r\n    // { chord: 'Gmin', type: '', positions: [], mutedStrings: [] },\r\n    {\r\n      chord: 'A',\r\n      type: 'simple',\r\n      positions: [[3, 2], [4, 2], [5, 2], null],\r\n      mutedStrings: [1],\r\n    },\r\n    {\r\n      chord: 'Amin',\r\n      type: 'simple',\r\n      positions: [[5, 1], [3, 2], [4, 2], null],\r\n      mutedStrings: [1],\r\n    },\r\n    {\r\n      chord: 'B',\r\n      type: 'barre',\r\n      positions: [\r\n        [[2, 6], 2],\r\n        [3, 4],\r\n        [4, 4],\r\n        [5, 4],\r\n      ],\r\n      mutedStrings: [1],\r\n    },\r\n    // { chord: 'Bmin', type: '', positions: [], mutedStrings: [] },\r\n  ],\r\n};\r\n\r\nexport const getStringPositionsParts = (stringPositions: StringPositions) =>\r\n  stringPositions\r\n    .map((pos, fingerIndex) => ({ pos, fingerIndex }))\r\n    .filter(\r\n      (x): x is { pos: StringPosition; fingerIndex: number } => x.pos != null,\r\n    )\r\n    .map(({ pos, fingerIndex }) => {\r\n      const [stringIdOrInterval, fretId] = pos;\r\n      const [startStringId, endStringId] = Array.isArray(stringIdOrInterval)\r\n        ? stringIdOrInterval\r\n        : [stringIdOrInterval, stringIdOrInterval];\r\n\r\n      return {\r\n        startStringId,\r\n        endStringId,\r\n        fretId,\r\n        fingerIndex,\r\n      };\r\n    });\r\n\r\nexport default chords;\r\n","import { Note } from './notes';\r\n\r\nexport type InstrumentName = 'guitar' | 'guitalele';\r\n\r\nexport type Tuning = Note[];\r\n\r\nconst tunings: Record<InstrumentName, Tuning> = {\r\n  guitar: ['E2', 'A2', 'D3', 'G3', 'B3', 'E4'],\r\n  guitalele: ['A2', 'D3', 'G3', 'C4', 'E4', 'A4'],\r\n};\r\n\r\nexport default tunings;\r\n","import { Box, Grid, Text } from 'grommet';\r\nimport { Close } from 'grommet-icons';\r\nimport styled, { css } from 'styled-components';\r\nimport { ChordName } from '../Theory/chords';\r\nimport chords, {\r\n  FretId,\r\n  getStringPositionsParts,\r\n  StringId,\r\n} from '../Theory/chords.guitar';\r\nimport { getNoteParts, NoteName, transposeNote } from '../Theory/notes';\r\nimport tunings, { InstrumentName } from '../Theory/tunings.guitar';\r\nimport FormattedNote from './FormattedNote';\r\n\r\nconst PushedFingerBox = styled(Box)`\r\n  width: 36px;\r\n  height: calc(100% - 12px);\r\n  justify-self: center;\r\n  border-radius: 18px;\r\n`;\r\n\r\nconst NoteCircleText = styled(Text)`\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 18px;\r\n  text-align: center;\r\n`;\r\n\r\nconst NoteBox = styled(Box)<{\r\n  disabled: boolean;\r\n  isStringMuted: boolean;\r\n  isVisible: boolean;\r\n  isActive: boolean;\r\n  isPushed: boolean;\r\n}>`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  color: ${({ isStringMuted, isActive, theme }) =>\r\n    isStringMuted\r\n      ? theme.global.colors['text-xweak'].dark\r\n      : isActive\r\n      ? theme.global.colors['text'].dark\r\n      : theme.global.colors['text-weak'].dark};\r\n\r\n  font-weight: ${({ isActive }) => (isActive ? 'bold' : 'normal')};\r\n\r\n  ${NoteCircleText} {\r\n    display: ${({ isVisible }) => (isVisible ? 'inline-block' : 'none')};\r\n  }\r\n\r\n  ${({ isVisible }) =>\r\n    isVisible &&\r\n    css`\r\n      & > :nth-child(2) {\r\n        display: none;\r\n      }\r\n    `}\r\n\r\n  ${({ disabled, isPushed, theme }) =>\r\n    !disabled &&\r\n    css`\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n        ${NoteCircleText} {\r\n          display: inline-block;\r\n\r\n          background: ${isPushed\r\n            ? theme.global.colors['accent-1']\r\n            : theme.global.colors['background-contrast'].dark};\r\n\r\n          font-weight: bold;\r\n        }\r\n\r\n        & > :nth-child(2) {\r\n          display: none;\r\n        }\r\n      }\r\n    `}\r\n`;\r\n\r\n/**\r\n * All parameters are zero-based, inclusive.\r\n *\r\n * @param x1 Start column (zero-based, inclusive)\r\n * @param y1 Start row (zero-based, inclusive)\r\n * @param x2 Optional end column (zero-based, inclusive), defaults to `x1`\r\n * @param y2 Optional end row (zero-based, inclusive), defaults to `y1`\r\n */\r\nconst getGridArea = (x1: number, y1: number, x2?: number, y2?: number) =>\r\n  `${y1 + 1}/${x1 + 1} / ${(y2 ?? y1) + 1 + 1}/${(x2 ?? x1) + 1 + 1}`;\r\n\r\nexport interface Props {\r\n  instrument?: InstrumentName;\r\n  chord: ChordName | undefined;\r\n  disabled: boolean;\r\n  highlightedNote: NoteName | undefined;\r\n  onHighlightNote: ((noteToSelect: NoteName | undefined) => void) | undefined;\r\n}\r\n\r\nconst StringChord = ({\r\n  instrument = 'guitar',\r\n  chord,\r\n  disabled,\r\n  highlightedNote,\r\n  onHighlightNote,\r\n}: Props) => {\r\n  const chordsForInstrument = chords[instrument] || [];\r\n  const chordDefinition =\r\n    chord && chordsForInstrument.find((c) => c.chord === chord);\r\n\r\n  const stringPositions = chordDefinition?.positions ?? [\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n  ];\r\n  const stringPositionsParts = getStringPositionsParts(stringPositions);\r\n  const mutedStrings = chordDefinition?.mutedStrings ?? [];\r\n\r\n  const maxFretId = (stringPositionsParts.reduce(\r\n    (acc, { fretId }) => Math.max(acc, fretId),\r\n    4,\r\n  ) + 1) as FretId;\r\n\r\n  const tuning = tunings[instrument] ?? [null, null, null, null, null, null];\r\n  const maxStringIndex = tuning.length - 1;\r\n\r\n  const strings = tuning.map((_, stringIndex) => ({\r\n    gridArea: getGridArea(\r\n      1,\r\n      maxStringIndex - stringIndex,\r\n      maxFretId,\r\n      maxStringIndex - stringIndex,\r\n    ),\r\n    isMuted: mutedStrings.includes((stringIndex + 1) as StringId),\r\n  }));\r\n\r\n  const frets = new Array(maxFretId).fill(undefined).map((_, fretId) => ({\r\n    gridArea: getGridArea(fretId, 0, fretId, maxStringIndex),\r\n    isStart: fretId === 0,\r\n  }));\r\n\r\n  const positions = stringPositionsParts.map(\r\n    ({ startStringId, endStringId, fretId, fingerIndex }) => ({\r\n      gridArea: getGridArea(\r\n        fretId,\r\n        maxStringIndex - (endStringId - 1),\r\n        fretId,\r\n        maxStringIndex - (startStringId - 1),\r\n      ),\r\n      finger: fingerIndex + 1,\r\n    }),\r\n  );\r\n\r\n  const notes = tuning.map((stringNote, stringIndex) => {\r\n    const stringId = (stringIndex + 1) as StringId;\r\n    const isStringMuted = mutedStrings.includes(stringId);\r\n\r\n    return new Array(maxFretId).fill(undefined).map((_, i) => {\r\n      const isActive = !!stringPositionsParts.find(\r\n        ({ startStringId, endStringId, fretId }) =>\r\n          stringId >= startStringId && stringId <= endStringId && i === fretId,\r\n      );\r\n      const note = transposeNote(stringNote, i);\r\n      const [noteName] = getNoteParts(note);\r\n\r\n      return {\r\n        gridArea: getGridArea(i, maxStringIndex - stringIndex),\r\n        isStringMuted,\r\n        isVisible: isActive || i === 0,\r\n        isActive: isActive,\r\n        isPushed: isActive && i !== 0,\r\n        isHighlighted: !disabled && highlightedNote === noteName,\r\n        note,\r\n        noteName,\r\n      };\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Grid\r\n      columns={Array(maxFretId).fill('1fr')}\r\n      rows={Array(maxStringIndex + 1).fill('xxsmall')}\r\n      gap={{ row: 'xxsmall' }}\r\n    >\r\n      {strings.map(({ gridArea, isMuted }) => (\r\n        <Box\r\n          key={gridArea}\r\n          gridArea={gridArea}\r\n          background={!isMuted ? 'background-contrast' : undefined}\r\n          border={[\r\n            {\r\n              side: 'bottom',\r\n              color: 'background-contrast',\r\n              size: 'small',\r\n            },\r\n          ]}\r\n        />\r\n      ))}\r\n\r\n      {frets.map(({ gridArea, isStart }) => (\r\n        <Box\r\n          key={gridArea}\r\n          gridArea={gridArea}\r\n          border={{\r\n            side: 'right',\r\n            color: 'text',\r\n            size: isStart ? 'small' : 'xsmall',\r\n          }}\r\n        />\r\n      ))}\r\n\r\n      {positions.map(({ gridArea, finger }) => (\r\n        <PushedFingerBox\r\n          key={gridArea}\r\n          gridArea={gridArea}\r\n          alignSelf=\"center\"\r\n          background={{ dark: 'border' }}\r\n        />\r\n      ))}\r\n\r\n      {notes.map((s) =>\r\n        s.map(\r\n          ({\r\n            isStringMuted,\r\n            isVisible,\r\n            isActive,\r\n            isPushed,\r\n            isHighlighted,\r\n            note,\r\n            noteName,\r\n            gridArea,\r\n          }) => (\r\n            <NoteBox\r\n              key={gridArea}\r\n              gridArea={gridArea}\r\n              align=\"center\"\r\n              justify=\"center\"\r\n              disabled={disabled}\r\n              isStringMuted={isStringMuted}\r\n              isVisible={isVisible || isHighlighted}\r\n              isActive={isActive || isHighlighted}\r\n              isPushed={isPushed}\r\n              onClick={\r\n                !disabled && onHighlightNote\r\n                  ? () => onHighlightNote(isHighlighted ? undefined : noteName)\r\n                  : undefined\r\n              }\r\n            >\r\n              <NoteCircleText textAlign=\"center\">\r\n                <FormattedNote note={note} />\r\n              </NoteCircleText>\r\n              {isStringMuted && <Close size=\"small\" />}\r\n            </NoteBox>\r\n          ),\r\n        ),\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default StringChord;\r\n","import { Card, CardBody, CardHeader } from 'grommet';\r\nimport { ChordName } from '../Theory/chords';\r\nimport { NoteName } from '../Theory/notes';\r\nimport ChordDefinition from './ChordDefinition';\r\nimport StringChord from './StringChord';\r\n\r\nexport interface Props {\r\n  chord?: ChordName;\r\n  isEditing?: boolean;\r\n  highlightedNote?: NoteName;\r\n  onRemoveChord?: (chordToRemove: ChordName) => void;\r\n  onHighlightNote?: (noteToSelect: NoteName | undefined) => void;\r\n}\r\n\r\nconst ChordCard = ({\r\n  chord,\r\n  isEditing,\r\n  highlightedNote,\r\n  onRemoveChord,\r\n  onHighlightNote,\r\n}: Props) => (\r\n  <Card background=\"background-back\" width=\"500px\">\r\n    <CardHeader\r\n      background=\"background-contrast\"\r\n      border={{ side: 'bottom', color: 'background-contrast' }}\r\n      justify=\"between\"\r\n    >\r\n      <ChordDefinition\r\n        chord={chord}\r\n        isEditing={isEditing || false}\r\n        onRemoveChord={chord && onRemoveChord && (() => onRemoveChord(chord))}\r\n      />\r\n    </CardHeader>\r\n    <CardBody\r\n      pad=\"small\"\r\n      border={{ side: 'top', color: 'background-contrast' }}\r\n    >\r\n      <StringChord\r\n        chord={chord}\r\n        disabled={isEditing || false}\r\n        highlightedNote={highlightedNote}\r\n        onHighlightNote={onHighlightNote}\r\n      />\r\n    </CardBody>\r\n  </Card>\r\n);\r\n\r\nexport default ChordCard;\r\n","import { Box, Stack, Text } from 'grommet';\r\nimport { Add } from 'grommet-icons';\r\nimport ChordCard from './ChordCard';\r\n\r\nconst EmptyChordCard = () => (\r\n  <Stack fill interactiveChild=\"last\">\r\n    <ChordCard />\r\n    <Box\r\n      fill\r\n      align=\"center\"\r\n      justify=\"center\"\r\n      gap=\"large\"\r\n      background={{ color: 'background', opacity: 'strong' }}\r\n      border={{ color: 'border-semi' }}\r\n    >\r\n      <Add size=\"large\" color=\"accent-1\" />\r\n      <Text size=\"large\" textAlign=\"center\" color=\"accent-1\">\r\n        Add a chord to start\r\n      </Text>\r\n    </Box>\r\n  </Stack>\r\n);\r\n\r\nexport default EmptyChordCard;\r\n","import { Grid } from 'grommet';\r\nimport { useState } from 'react';\r\nimport { ChordName } from '../Theory/chords';\r\nimport { NoteName } from '../Theory/notes';\r\nimport ChordCard from './ChordCard';\r\nimport EmptyChordCard from './EmptyChordCard';\r\n\r\nexport interface Props {\r\n  chords: ChordName[];\r\n  isEditing: boolean;\r\n  onRemoveChord: (chordToRemove: ChordName) => void;\r\n}\r\n\r\nconst ChordCardCollection = ({ chords, isEditing, onRemoveChord }: Props) => {\r\n  const [highlightedNote, setHighlightedNote] = useState<NoteName>();\r\n\r\n  return (\r\n    <Grid columns=\"medium\" gap=\"small\" justify=\"center\">\r\n      {chords.length !== 0 ? (\r\n        chords.map((c) => (\r\n          <ChordCard\r\n            key={c}\r\n            chord={c}\r\n            isEditing={isEditing}\r\n            highlightedNote={highlightedNote}\r\n            onRemoveChord={onRemoveChord}\r\n            onHighlightNote={setHighlightedNote}\r\n          />\r\n        ))\r\n      ) : (\r\n        <EmptyChordCard />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ChordCardCollection;\r\n","import { Box, Button, Collapsible, Select } from 'grommet';\r\nimport { Add, Checkmark, Edit } from 'grommet-icons';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport { ChordName } from '../Theory/chords';\r\n\r\nexport interface Props {\r\n  chords: ChordName[];\r\n  isEditing: boolean;\r\n  onAddChord: (chordToAdd: ChordName) => void;\r\n  onIsEditingChange: (isEditing: boolean) => void;\r\n}\r\n\r\nconst ChordSelector = ({\r\n  chords,\r\n  isEditing,\r\n  onAddChord,\r\n  onIsEditingChange,\r\n}: Props) => {\r\n  const [searchString, setSearchString] = useState('');\r\n\r\n  const matchingChords = useMemo(\r\n    () =>\r\n      chords\r\n        .map((c) => ({ label: c, value: c }))\r\n        .filter((x) =>\r\n          x.label.toLowerCase().includes(searchString.toLowerCase()),\r\n        ),\r\n    [chords, searchString],\r\n  );\r\n\r\n  const handleChange = useCallback(\r\n    ({ value }) => {\r\n      setSearchString('');\r\n      onAddChord(value as ChordName);\r\n    },\r\n    [onAddChord],\r\n  );\r\n\r\n  return (\r\n    <Box direction=\"row\" gap=\"small\" justify=\"end\" align=\"center\">\r\n      <Collapsible open={isEditing} direction=\"horizontal\">\r\n        <Select\r\n          icon={<Add />}\r\n          options={matchingChords}\r\n          valueKey={{ key: 'value', reduce: true }}\r\n          labelKey={(c) => c.label}\r\n          closeOnChange={false}\r\n          placeholder=\"Add chords\"\r\n          searchPlaceholder=\"Search by name\"\r\n          a11yTitle=\"Select chords to add\"\r\n          onSearch={setSearchString}\r\n          onChange={handleChange}\r\n        />\r\n      </Collapsible>\r\n      <Button\r\n        icon={\r\n          <Box direction=\"row\">\r\n            <Collapsible open={isEditing} direction=\"horizontal\">\r\n              <Checkmark />\r\n            </Collapsible>\r\n            <Collapsible open={!isEditing} direction=\"horizontal\">\r\n              <Edit />\r\n            </Collapsible>\r\n          </Box>\r\n        }\r\n        a11yTitle={\r\n          isEditing ? 'Done adding/removing chords' : 'Add/remove chords'\r\n        }\r\n        primary={isEditing}\r\n        onClick={() => onIsEditingChange(!isEditing)}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChordSelector;\r\n","import { Box, Heading, Text, TextInput } from 'grommet';\r\nimport { useState } from 'react';\r\nimport { ChordName } from '../Theory/chords';\r\nimport ChordCardCollection from './ChordCardCollection';\r\nimport ChordSelector from './ChordSelector';\r\n\r\nexport interface Props {\r\n  name: string;\r\n  description: string;\r\n  selectedChords: ChordName[];\r\n  availableChords: ChordName[];\r\n  onSetName: (newName: string) => void;\r\n  onSetDescription: (newDescription: string) => void;\r\n  onAddChord: (chordToAdd: ChordName) => void;\r\n  onRemoveChord: (chordToRemove: ChordName) => void;\r\n}\r\n\r\nconst ChordSet = ({\r\n  name,\r\n  description,\r\n  selectedChords,\r\n  availableChords,\r\n  onSetName,\r\n  onSetDescription,\r\n  onAddChord,\r\n  onRemoveChord,\r\n}: Props) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const filteredChords = availableChords.filter(\r\n    (c) => selectedChords.indexOf(c) < 0,\r\n  );\r\n\r\n  return (\r\n    <Box gap=\"medium\">\r\n      <Box direction=\"row\" align=\"start\" gap=\"small\">\r\n        <Box gap=\"none\" align=\"left\" width=\"100%\">\r\n          <Heading level={2} size=\"small\" margin={{ vertical: 'small' }}>\r\n            {isEditing ? (\r\n              <TextInput\r\n                plain=\"full\"\r\n                value={name}\r\n                placeholder=\"Enter name\"\r\n                onChange={(event) => onSetName(event.target.value)}\r\n              />\r\n            ) : (\r\n              name || <em>No name</em>\r\n            )}\r\n          </Heading>\r\n          <Text>\r\n            {isEditing ? (\r\n              <TextInput\r\n                plain=\"full\"\r\n                value={description}\r\n                placeholder=\"Enter description\"\r\n                onChange={(event) => onSetDescription(event.target.value)}\r\n              />\r\n            ) : (\r\n              description || <em>No description</em>\r\n            )}\r\n          </Text>\r\n        </Box>\r\n        <ChordSelector\r\n          chords={filteredChords}\r\n          isEditing={isEditing}\r\n          onAddChord={onAddChord}\r\n          onIsEditingChange={setIsEditing}\r\n        />\r\n      </Box>\r\n      <ChordCardCollection\r\n        chords={selectedChords}\r\n        isEditing={isEditing}\r\n        onRemoveChord={onRemoveChord}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChordSet;\r\n","import { Box } from 'grommet';\r\nimport type { ChordSet as ChordSetType } from '../Store/Types/State';\r\nimport { ChordName } from '../Theory/chords';\r\nimport ChordSet from './ChordSet';\r\n\r\nexport interface Props {\r\n  chordSets: ChordSetType[];\r\n  availableChords: ChordName[];\r\n  onSetName: (chordSetIndex: number, newName: string) => void;\r\n  onSetDescription: (chordSetIndex: number, newDescription: string) => void;\r\n  onAddChord: (chordSetIndex: number, chordToAdd: ChordName) => void;\r\n  onRemoveChord: (chordSetIndex: number, chordToRemove: ChordName) => void;\r\n}\r\n\r\nconst ChordSetCollection = ({\r\n  chordSets,\r\n  availableChords,\r\n  onSetName,\r\n  onSetDescription,\r\n  onAddChord,\r\n  onRemoveChord,\r\n}: Props) => (\r\n  <Box gap=\"large\" border={{ side: 'between', color: 'border-semi' }}>\r\n    {chordSets.map(({ name, description, selectedChords }, i) => (\r\n      <ChordSet\r\n        key={i}\r\n        name={name}\r\n        description={description}\r\n        selectedChords={selectedChords}\r\n        availableChords={availableChords}\r\n        onSetName={(newName) => onSetName(i, newName)}\r\n        onSetDescription={(newDescription) =>\r\n          onSetDescription(i, newDescription)\r\n        }\r\n        onAddChord={(chordToAdd) => onAddChord(i, chordToAdd)}\r\n        onRemoveChord={(chordToRemove) => onRemoveChord(i, chordToRemove)}\r\n      />\r\n    ))}\r\n  </Box>\r\n);\r\n\r\nexport default ChordSetCollection;\r\n","import {\r\n  Dispatch,\r\n  Reducer,\r\n  ReducerAction,\r\n  ReducerState,\r\n  useMemo,\r\n  useReducer,\r\n} from 'react';\r\n\r\nexport interface StoredState extends Record<any, any> {\r\n  version?: number;\r\n}\r\n\r\nconst createStoringReducer = <S extends StoredState, A>(\r\n  key: string,\r\n  reducer: Reducer<S, A>,\r\n): Reducer<S, A> => {\r\n  let writeTimeoutRef: number | undefined;\r\n\r\n  const storingReducer: Reducer<S, A> = (state, action) => {\r\n    const newState = reducer(state, action);\r\n\r\n    if (newState !== state) {\r\n      window.clearTimeout(writeTimeoutRef);\r\n\r\n      writeTimeoutRef = window.setTimeout(() => {\r\n        try {\r\n          localStorage.setItem(key, JSON.stringify(newState));\r\n          console.log(\r\n            `Written to local storage (version: ${newState.version})`,\r\n            newState,\r\n          );\r\n        } catch (error) {\r\n          // TODO\r\n          console.error(\"Couldn't write to local storage.\", error);\r\n        }\r\n      }, 100);\r\n    }\r\n\r\n    return newState;\r\n  };\r\n\r\n  return storingReducer;\r\n};\r\n\r\nconst readStoredState = <S extends StoredState>(key: string): S | undefined => {\r\n  try {\r\n    const rawState = localStorage.getItem(key);\r\n    const readState = rawState && JSON.parse(rawState);\r\n    console.log(\r\n      `Read from local storage (version: ${readState?.version})`,\r\n      readState,\r\n    );\r\n    return readState;\r\n  } catch (error) {\r\n    // TODO\r\n    console.error(\"Couldn't read from local storage.\", error);\r\n  }\r\n};\r\n\r\nconst useStoringReducer = <R extends Reducer<any, any>, S extends StoredState>(\r\n  key: string,\r\n  reducer: R,\r\n  migrateState: (readState: StoredState) => S,\r\n  initialState: S,\r\n  initializer?: undefined,\r\n): [ReducerState<R>, Dispatch<ReducerAction<R>>] => {\r\n  const storingReducer = useMemo(\r\n    () => createStoringReducer(key, reducer),\r\n    [key, reducer],\r\n  );\r\n  const readState = useMemo(() => readStoredState(key), [key]);\r\n\r\n  const migratedState = useMemo(\r\n    () => migrateState(readState ?? initialState),\r\n    [migrateState, readState, initialState],\r\n  );\r\n\r\n  return useReducer(\r\n    storingReducer,\r\n    migratedState,\r\n    readState ? undefined : initializer,\r\n  );\r\n};\r\n\r\nexport default useStoringReducer;\r\n","import type { StoredState } from '../Hooks/useStoringReducer';\r\nimport type {\r\n  StateVersion0,\r\n  StateVersion1,\r\n  StateVersion2,\r\n} from './Types/State';\r\n\r\nconst migrateFrom0To1 = (state: StateVersion0): StateVersion1 => ({\r\n  version: 1,\r\n  ...state,\r\n});\r\n\r\nconst migrateFrom1To2 = ({\r\n  version,\r\n  ...rest\r\n}: StateVersion1): StateVersion2 => ({\r\n  version: 2,\r\n  chordSets: [{ name: '', description: '', ...rest }],\r\n});\r\n\r\nconst migrations: StoredState = [migrateFrom0To1, migrateFrom1To2];\r\n\r\nexport default migrations;\r\n","import type { Reducer } from 'react';\r\nimport { StoredState } from '../Hooks/useStoringReducer';\r\nimport type { Action } from './actions';\r\nimport migrations from './migrations';\r\nimport type { ChordSet, State } from './Types/State';\r\n\r\nexport const initialState: State = {\r\n  version: 2,\r\n  chordSets: [\r\n    {\r\n      name: 'Example: Leaving on a Jet Plane',\r\n      description: \"Example chordset for John Denver's Leaving on a Jet Plane\",\r\n      selectedChords: ['G', 'C', 'D'],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const migrateState = (state: StoredState): State => {\r\n  const { version } = state;\r\n\r\n  for (let i = version ?? 0; i < initialState.version; i++) {\r\n    const migration = migrations[i];\r\n    state = migration(state);\r\n    console.log(`Migrated from version ${i} → ${i + 1}`, state);\r\n  }\r\n\r\n  return state as State;\r\n};\r\n\r\nconst reducer: Reducer<State, Action> = (state, action) => {\r\n  switch (action.type) {\r\n    case 'setChordSetName':\r\n    case 'setChordSetDescription':\r\n    case 'addChordToSet':\r\n    case 'removeChordFromSet': {\r\n      const { chordSetIndex } = action;\r\n      const newChordSet = chordSetReducer(\r\n        state.chordSets[chordSetIndex],\r\n        action,\r\n      );\r\n      return state.chordSets[chordSetIndex] &&\r\n        newChordSet !== state.chordSets[chordSetIndex]\r\n        ? {\r\n            ...state,\r\n            chordSets: [\r\n              ...state.chordSets.slice(0, chordSetIndex),\r\n              newChordSet,\r\n              ...state.chordSets.slice(chordSetIndex + 1),\r\n            ],\r\n          }\r\n        : state;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst chordSetReducer: Reducer<ChordSet, Action> = (state, action) => {\r\n  switch (action.type) {\r\n    case 'setChordSetName':\r\n      return {\r\n        ...state,\r\n        name: action.newName,\r\n      };\r\n\r\n    case 'setChordSetDescription':\r\n      return {\r\n        ...state,\r\n        description: action.newDescription,\r\n      };\r\n\r\n    case 'addChordToSet': {\r\n      const { chordToAdd } = action;\r\n      return !state.selectedChords.find((c) => c === chordToAdd)\r\n        ? {\r\n            ...state,\r\n            selectedChords: [...state.selectedChords, chordToAdd],\r\n          }\r\n        : state;\r\n    }\r\n\r\n    case 'removeChordFromSet': {\r\n      const { chordToRemove } = action;\r\n      return state.selectedChords.find((c) => c === chordToRemove)\r\n        ? {\r\n            ...state,\r\n            selectedChords: state.selectedChords.filter(\r\n              (c) => c !== chordToRemove,\r\n            ),\r\n          }\r\n        : state;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { grommet } from 'grommet/themes';\r\nimport { deepMerge } from 'grommet/utils';\r\n\r\n// https://www.shutterstock.com/blog/art-deco-graphic-design-techniques\r\nconst goldColor = '#d1ad70'; // gold\r\nconst aquamarineColor = '#87ccb0'; // aquamarine\r\n// const turquoiseColor = '#91d4cf'; // light turquoise\r\nconst navyBlueColorColor = '#15173d'; // navy blue\r\n\r\nconst theme = deepMerge(grommet, {\r\n  global: {\r\n    colors: {\r\n      background: '#010115', // x-darker navy blue\r\n      'background-back': {\r\n        dark: '#080920', // darker navy blue\r\n        // light: '#EDEDED',\r\n      },\r\n      'background-front': {\r\n        dark: navyBlueColorColor,\r\n        // light: '#FFFFFF',\r\n      },\r\n      'background-contrast': {\r\n        dark: '#3f438a17',\r\n        // light: '#33333310',\r\n      },\r\n\r\n      black: '#00010d', // almost black navy blue\r\n      white: '#fff9ef', // almost white gold\r\n\r\n      brand: aquamarineColor,\r\n      'accent-1': goldColor,\r\n\r\n      border: {\r\n        dark: '#d1ad7080', // semitransparent gold\r\n        // light: '#d1ad7080',\r\n      },\r\n\r\n      'border-semi': {\r\n        dark: '#d1ad7040', // semi-semitransparent gold\r\n        // light: '#d1ad7080',\r\n      },\r\n    },\r\n\r\n    font: {\r\n      family: '\"Josefin Sans\"',\r\n      face:\r\n        \"/* vietnamese */\\n@font-face {\\n  font-family: 'Josefin Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/josefinsans/v17/Qw3PZQNVED7rKGKxtqIqX5E-AVSJrOCfjY46_DjQbMlhLzTs.woff2) format('woff2');\\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Josefin Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/josefinsans/v17/Qw3PZQNVED7rKGKxtqIqX5E-AVSJrOCfjY46_DjQbMhhLzTs.woff2) format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Josefin Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/josefinsans/v17/Qw3PZQNVED7rKGKxtqIqX5E-AVSJrOCfjY46_DjQbMZhLw.woff2) format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n\" +\r\n        \"/* latin-ext */\\n@font-face {\\n  font-family: 'Limelight';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/limelight/v11/XLYkIZL7aopJVbZJHDuoNOlHnnY.woff2) format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Limelight';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/limelight/v11/XLYkIZL7aopJVbZJHDuoOulH.woff2) format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Limelight';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/limelight/v11/XLYkIZL7aopJVbZJHDuoNOlHnnY.woff2) format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Limelight';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/limelight/v11/XLYkIZL7aopJVbZJHDuoOulH.woff2) format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n\",\r\n    },\r\n  },\r\n\r\n  heading: {\r\n    font: {\r\n      family: '\"Limelight\"',\r\n    },\r\n  },\r\n\r\n  button: {\r\n    border: {\r\n      radius: '3px',\r\n    },\r\n  },\r\n\r\n  card: {\r\n    container: {\r\n      border: 'solid',\r\n      round: 'xxsmall',\r\n      elevation: null,\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import { Footer, Grommet, Header, Heading, Main, Text } from 'grommet';\r\nimport React, { useCallback } from 'react';\r\nimport './App.css';\r\nimport ChordSetCollection from './Components/ChordSetCollection';\r\nimport useStoringReducer from './Hooks/useStoringReducer';\r\nimport * as actions from './Store/actions';\r\nimport reducer, { initialState, migrateState } from './Store/reducer';\r\nimport * as selectors from './Store/selectors';\r\nimport theme from './theme';\r\n\r\nconst applicationStateStorageKey = 'applicationState';\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useStoringReducer(\r\n    applicationStateStorageKey,\r\n    reducer,\r\n    migrateState,\r\n    initialState,\r\n  );\r\n\r\n  const chordSets = selectors.getChordSets(state);\r\n  const availableChords = selectors.getAvailableChords();\r\n\r\n  const handleSetChordSetName = useCallback(\r\n    (chordSetIndex, newName) =>\r\n      dispatch(actions.setChordSetName(chordSetIndex, newName)),\r\n    [dispatch],\r\n  );\r\n\r\n  const handleSetChordSetDescription = useCallback(\r\n    (chordSetIndex, newDescription) =>\r\n      dispatch(actions.setChordSetDescription(chordSetIndex, newDescription)),\r\n    [dispatch],\r\n  );\r\n\r\n  const handleAddChordFromSet = useCallback(\r\n    (chordSetIndex, chordToAdd) =>\r\n      dispatch(actions.addChordToSet(chordSetIndex, chordToAdd)),\r\n    [dispatch],\r\n  );\r\n\r\n  const handleRemoveChordFromSet = useCallback(\r\n    (chordSetIndex, chordToRemove) =>\r\n      dispatch(actions.removeChordFromSet(chordSetIndex, chordToRemove)),\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <Grommet theme={theme} themeMode=\"dark\">\r\n      <Header\r\n        pad={{ vertical: 'medium', horizontal: 'large' }}\r\n        background=\"brand\"\r\n      >\r\n        <Heading size=\"small\" margin=\"none\">\r\n          Chord Helper\r\n        </Heading>\r\n      </Header>\r\n      <Main pad=\"large\" gap=\"medium\">\r\n        <ChordSetCollection\r\n          chordSets={chordSets}\r\n          availableChords={availableChords}\r\n          onSetName={handleSetChordSetName}\r\n          onSetDescription={handleSetChordSetDescription}\r\n          onAddChord={handleAddChordFromSet}\r\n          onRemoveChord={handleRemoveChordFromSet}\r\n        />\r\n      </Main>\r\n      <Footer\r\n        pad={{ vertical: 'small', horizontal: 'large' }}\r\n        background=\"black\"\r\n        justify=\"center\"\r\n      >\r\n        <Text color=\"text-xweak\">Helping you with chords since 2021.</Text>\r\n      </Footer>\r\n    </Grommet>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import chords from '../Theory/chords.guitar';\r\nimport type { State } from './Types/State';\r\n\r\nexport const getChordSets = (state: State) => state.chordSets;\r\n\r\nexport const getAvailableChords = () => {\r\n  const chordsForInstrument = chords['guitar'] ?? [];\r\n  return chordsForInstrument.map((c) => c.chord);\r\n};\r\n","import type { ChordName } from '../Theory/chords';\r\n\r\nexport interface SetChordSetNameAction {\r\n  type: 'setChordSetName';\r\n  chordSetIndex: number;\r\n  newName: string;\r\n}\r\n\r\nexport const setChordSetName = (\r\n  chordSetIndex: number,\r\n  newName: string,\r\n): SetChordSetNameAction => ({\r\n  type: 'setChordSetName',\r\n  chordSetIndex,\r\n  newName,\r\n});\r\n\r\nexport interface SetChordSetDescriptionAction {\r\n  type: 'setChordSetDescription';\r\n  chordSetIndex: number;\r\n  newDescription: string;\r\n}\r\n\r\nexport const setChordSetDescription = (\r\n  chordSetIndex: number,\r\n  newDescription: string,\r\n): SetChordSetDescriptionAction => ({\r\n  type: 'setChordSetDescription',\r\n  chordSetIndex,\r\n  newDescription,\r\n});\r\n\r\nexport interface AddChordToSetAction {\r\n  type: 'addChordToSet';\r\n  chordSetIndex: number;\r\n  chordToAdd: ChordName;\r\n}\r\n\r\nexport const addChordToSet = (\r\n  chordSetIndex: number,\r\n  chordToAdd: ChordName,\r\n): AddChordToSetAction => ({\r\n  type: 'addChordToSet',\r\n  chordSetIndex,\r\n  chordToAdd,\r\n});\r\n\r\nexport interface RemoveChordFromSetAction {\r\n  type: 'removeChordFromSet';\r\n  chordSetIndex: number;\r\n  chordToRemove: ChordName;\r\n}\r\n\r\nexport const removeChordFromSet = (\r\n  chordSetIndex: number,\r\n  chordToRemove: ChordName,\r\n): RemoveChordFromSetAction => ({\r\n  type: 'removeChordFromSet',\r\n  chordSetIndex,\r\n  chordToRemove,\r\n});\r\n\r\nexport type Action =\r\n  | SetChordSetNameAction\r\n  | SetChordSetDescriptionAction\r\n  | AddChordToSetAction\r\n  | RemoveChordFromSetAction;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}