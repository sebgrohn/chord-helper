{"version":3,"sources":["Theory/notes.ts","Theory/chords.ts","Components/FormattedNote.tsx","Components/ChordDefinition.tsx","Theory/chords.guitar.ts","Theory/tunings.guitar.ts","Components/StringChord.tsx","Components/ChordCard.tsx","Components/ChordCollection.tsx","Components/ChordSelector.tsx","Store/reducer.ts","Store/selectors.ts","theme.ts","App.tsx","Store/actions.ts","reportWebVitals.ts","index.tsx"],"names":["noteNames","notePattern","getNoteParts","note","exec","noteName","octave","Number","parseInt","transposeNoteName","Math","pow","semitoneDistance","index","indexOf","transposeNote","getNoteFromParts","sign","floor","abs","chordDefinitions","maj6","dom7","maj7","aug","aug7","min","min6","min7","chordNamePattern","getChordNameParts","chordName","FormattedNote","hash","ChordDefinition","chord","chordNotes","rootNoteName","chordModifier","map","x","getChordNotes","n","chords","guitar","C","D","Dmin","E","Emin","G","A","Amin","B","guitalele","tunings","StringChord","styled","table","td","isPushed","instrument","chordsForInstrument","stringPositions","reversedPositions","reverse","maxPosition","p","reduce","acc","tuning","reversedTuning","reversedStringNotes","j","Array","fill","undefined","_","i","isMuted","Table","style","width","height","TableBody","s","TableRow","TableCell","border","side","size","color","align","pad","Box","Text","textAlign","weight","ChordCard","Card","CardHeader","CardBody","background","ChordCollection","useContext","ResponsiveContext","Grid","columns","gap","c","ChordSelector","onChordSelected","useState","selectedChord","setSelectedChord","searchString","setSearchString","matchingChords","useMemo","label","value","filter","toLowerCase","includes","handleChange","useCallback","Select","options","valueKey","key","labelKey","closeOnChange","placeholder","onSearch","onChange","initialState","selectedChords","reducer","state","action","type","find","Error","getSelectedChords","theme","App","useReducer","dispatch","selectors","availableChords","Object","keys","handleChordSelected","newChord","grommetTheme","ThemeContext","console","log","Grommet","full","grommet","themeMode","Header","vertical","horizontal","Main","Heading","Footer","justify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9ebde57.chunk.js","sourcesContent":["export type NoteName =\r\n  | 'C'\r\n  | 'C#'\r\n  | 'D'\r\n  | 'D#'\r\n  | 'E'\r\n  | 'F'\r\n  | 'F#'\r\n  | 'G'\r\n  | 'G#'\r\n  | 'A'\r\n  | 'A#'\r\n  | 'B';\r\n\r\nexport type OctaveNumber = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\r\n\r\nexport type Note = `${NoteName}${OctaveNumber}`;\r\n\r\nconst noteNames: NoteName[] = [\r\n  'C',\r\n  'C#',\r\n  'D',\r\n  'D#',\r\n  'E',\r\n  'F',\r\n  'F#',\r\n  'G',\r\n  'G#',\r\n  'A',\r\n  'A#',\r\n  'B',\r\n];\r\n\r\n// https://en.wikipedia.org/wiki/Interval_(music)#Main_intervals\r\nexport const intervalNames: Record<number, string> = {\r\n  0: 'perfect unison',\r\n  1: 'minor second',\r\n  2: 'major second',\r\n  3: 'minor third',\r\n  4: 'major third',\r\n  5: 'perfect fourth',\r\n  6: 'augmented fourth/diminished fifth',\r\n  7: 'perfect fifth',\r\n  8: 'minor sixth',\r\n  9: 'major sixth',\r\n  10: 'minor seventh',\r\n  11: 'major seventh',\r\n  12: 'perfect octave',\r\n};\r\n\r\nconst notePattern = /^\\s*([A-G]#?)(\\d)\\s*$/;\r\n\r\nconst getNoteParts = (note: Note): [NoteName, OctaveNumber] => {\r\n  const [_, noteName, octave] = notePattern.exec(note) ?? [];\r\n  return [noteName as NoteName, Number.parseInt(octave) as OctaveNumber];\r\n};\r\n\r\nconst getNoteFromParts = (noteName: NoteName, octave: OctaveNumber): Note =>\r\n  `${noteName}${octave}` as Note;\r\n\r\nexport const isValidNote = (noteString: string): noteString is Note =>\r\n  notePattern.test(noteString);\r\n\r\nexport const getSemitoneDistance = (note1: Note, note2: Note): number => {\r\n  const [noteName1, octave1] = getNoteParts(note1);\r\n  const [noteName2, octave2] = getNoteParts(note2);\r\n  return (\r\n    12 * (octave2 - octave1) +\r\n    (noteNames.indexOf(noteName2) - noteNames.indexOf(noteName1))\r\n  );\r\n};\r\n\r\n// https://en.wikipedia.org/wiki/A440_(pitch_standard)\r\nconst standardPitch = {\r\n  note: 'A4' as Note,\r\n  frequency: 440, // Hz\r\n  semiToneRatio: Math.pow(2, 1 / 12),\r\n};\r\n\r\nexport const getNotePitch = (note: Note): number => {\r\n  const semitoneDistanceFromStandard = getSemitoneDistance(\r\n    standardPitch.note,\r\n    note,\r\n  );\r\n  return (\r\n    standardPitch.frequency *\r\n    Math.pow(standardPitch.semiToneRatio, semitoneDistanceFromStandard)\r\n  );\r\n};\r\n\r\nexport const transposeNoteName = (\r\n  noteName: NoteName,\r\n  semitoneDistance: number,\r\n) => {\r\n  const index = noteNames.indexOf(noteName);\r\n  const transposedIndex = (index + semitoneDistance) % 12;\r\n  return noteNames[transposedIndex];\r\n};\r\n\r\nexport const transposeNote = (note: Note, semitoneDistance: number) => {\r\n  const [noteName, octave] = getNoteParts(note);\r\n  const transposedNoteName = transposeNoteName(noteName, semitoneDistance);\r\n  const octaveDistance =\r\n    Math.sign(semitoneDistance) * Math.floor(Math.abs(semitoneDistance) / 12);\r\n  return getNoteFromParts(\r\n    transposedNoteName,\r\n    (octave + octaveDistance) as OctaveNumber,\r\n  );\r\n};\r\n","import { NoteName, transposeNoteName } from './notes';\r\n\r\nexport type ChordModifier =\r\n  | ''\r\n  | 'maj6'\r\n  | 'dom7'\r\n  | 'maj7'\r\n  | 'aug'\r\n  | 'aug7'\r\n  | 'min'\r\n  | 'min6'\r\n  | 'min7'; // ...more\r\n\r\nexport type ChordName = `${NoteName}${ChordModifier}`;\r\n\r\nexport type ChordDefinition = (\r\n  | 0\r\n  | 1\r\n  | 2\r\n  | 3\r\n  | 4\r\n  | 5\r\n  | 6\r\n  | 7\r\n  | 8\r\n  | 9\r\n  | 10\r\n  | 11\r\n)[];\r\n\r\n// https://en.wikipedia.org/wiki/Chord_(music)#Examples\r\nconst chordDefinitions: Record<ChordModifier, ChordDefinition> = {\r\n  '': [0, 4, 7], // major\r\n  maj6: [0, 4, 7, 9], // major 6th\r\n  dom7: [0, 4, 7, 10], // dominant 7th\r\n  maj7: [0, 4, 7, 11], // major 7th\r\n\r\n  aug: [0, 4, 8], // augmented\r\n  aug7: [0, 4, 8, 10], //augmented 7th\r\n\r\n  min: [0, 3, 7], // minor\r\n  min6: [0, 3, 7, 9], // minor 6th\r\n  min7: [0, 3, 7, 10], // minor 7th\r\n};\r\n\r\nconst chordNamePattern = /^\\s*([A-G]#?)(|maj6|dom7|maj7|aug|aug7|min|min6|min7)\\s*$/;\r\n\r\nconst getChordNameParts = (chordName: ChordName): [NoteName, ChordModifier] => {\r\n  const [_, rootNoteName, chordModifier] =\r\n    chordNamePattern.exec(chordName) ?? [];\r\n  return [rootNoteName as NoteName, chordModifier as ChordModifier];\r\n};\r\n\r\nconst getChordNameFromParts = (\r\n  rootNoteName: NoteName,\r\n  chordModifier: ChordModifier,\r\n): ChordName => `${rootNoteName}${chordModifier}` as ChordName;\r\n\r\nexport const isValidChordName = (\r\n  chordNameString: string,\r\n): chordNameString is ChordName => chordNamePattern.test(chordNameString);\r\n\r\nexport const getChordNotes = (chordName: ChordName): NoteName[] => {\r\n  const [rootNoteName, chordModifier] = getChordNameParts(chordName);\r\n  const chordDefinition = chordDefinitions[chordModifier];\r\n  return chordDefinition.map((x) => transposeNoteName(rootNoteName, x));\r\n};\r\n\r\nexport const transposeChord = (\r\n  chordName: ChordName,\r\n  semitoneDistance: number,\r\n): ChordName => {\r\n  const [rootNoteName, chordModifier] = getChordNameParts(chordName);\r\n  const transposedNoteName = transposeNoteName(rootNoteName, semitoneDistance);\r\n  return getChordNameFromParts(transposedNoteName, chordModifier);\r\n};\r\n","import { Text } from 'grommet';\r\nimport { ColorType } from 'grommet/utils';\r\nimport { Note, NoteName } from '../Theory/notes';\r\n\r\nconst notePattern = /^\\s*([A-G])(#)?(\\d)?\\s*$/;\r\n\r\nconst getNoteParts = (note: Note | NoteName) => {\r\n  const [_, noteName, hash, octave] = notePattern.exec(note) ?? [];\r\n  return [noteName, hash, octave];\r\n};\r\n\r\nexport interface Props {\r\n  note: Note | NoteName;\r\n}\r\n\r\nconst FormattedNote = ({ note }: Props) => {\r\n  const [noteName, hash, octave] = getNoteParts(note);\r\n  return (\r\n    <>\r\n      {noteName}\r\n      <sup>{hash && '♯'}</sup>\r\n      {octave && <sub>{octave}</sub>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormattedNote;\r\n","import { Fragment } from 'react';\r\nimport { ChordName, getChordNotes } from '../Theory/chords';\r\nimport FormattedNote from './FormattedNote';\r\n\r\nexport interface Props {\r\n  chord?: ChordName;\r\n}\r\n\r\nconst ChordDefinition = ({ chord }: Props) => {\r\n  if (!chord) {\r\n    return null;\r\n  }\r\n\r\n  const chordNotes = getChordNotes(chord);\r\n  return (\r\n    <div>\r\n      Name: {chord}\r\n      <br />\r\n      Notes:{' '}\r\n      {chordNotes.map((n) => (\r\n        <Fragment>\r\n          <FormattedNote note={n} />{' '}\r\n        </Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChordDefinition;\r\n","import { ChordName } from './chords';\r\nimport { InstrumentName } from './tunings.guitar';\r\n\r\ntype StringPositions = (number | null)[];\r\n\r\nconst chords: Record<\r\n  InstrumentName,\r\n  Partial<Record<ChordName, StringPositions>>\r\n> = {\r\n  guitar: {\r\n    C: [null, 3, 2, 0, 1, 0],\r\n    D: [null, null, 0, 2, 3, 2],\r\n    Dmin: [null, null, 0, 2, 3, 1],\r\n    E: [0, 2, 2, 1, 0, 0],\r\n    Emin: [0, 2, 2, 0, 0, 0],\r\n    // F: [1, 3, 3, 2, 1, 1],\r\n    G: [3, 2, 0, 0, 0, 3],\r\n    A: [null, 0, 2, 2, 2, 0],\r\n    Amin: [null, 0, 2, 2, 1, 0],\r\n    B: [null, 2, 4, 4, 4, 2],\r\n  },\r\n  guitalele: {},\r\n};\r\n\r\nexport default chords;\r\n","import { Note } from './notes';\r\n\r\nexport type InstrumentName = 'guitar' | 'guitalele';\r\n\r\nexport type Tuning = Note[];\r\n\r\nconst tunings: Record<InstrumentName, Tuning> = {\r\n  guitar: ['E2', 'A2', 'D3', 'G3', 'B3', 'E4'],\r\n  guitalele: ['A2', 'D3', 'G3', 'C4', 'E4', 'A4'],\r\n};\r\n\r\nexport default tunings;\r\n","import { Box, Table, TableBody, TableCell, TableRow, Text } from 'grommet';\r\nimport styled from 'styled-components';\r\nimport { ChordName } from '../Theory/chords';\r\nimport chords from '../Theory/chords.guitar';\r\nimport { transposeNote } from '../Theory/notes';\r\nimport tunings, { InstrumentName, Tuning } from '../Theory/tunings.guitar';\r\nimport FormattedNote from './FormattedNote';\r\n\r\nexport interface Props {\r\n  instrument?: InstrumentName;\r\n  chord: ChordName | undefined;\r\n}\r\n\r\nconst StyledTable = styled.table`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  td {\r\n    min-width: 35px;\r\n    height: 35px;\r\n\r\n    border-bottom: 1px solid #808080;\r\n    border-right: 1px solid #c0c0c0;\r\n    &:first-child {\r\n      border-right-width: 2px;\r\n    }\r\n  }\r\n\r\n  tr:last-child > td,\r\n  td:first-child {\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\nconst StyledTd = styled.td<{ isPushed?: boolean }>`\r\n  color: ${({ isPushed }) => (isPushed ? 'white' : '#808080')};\r\n`;\r\n\r\nconst StringChord = ({ instrument = 'guitar', chord }: Props) => {\r\n  const chordsForInstrument = chords[instrument];\r\n  const stringPositions = (chord &&\r\n    chord in chordsForInstrument &&\r\n    chordsForInstrument[chord]) || [null, null, null, null, null, null];\r\n  const reversedPositions = [...stringPositions].reverse();\r\n\r\n  const maxPosition =\r\n    stringPositions\r\n      .map((p) => p ?? 0)\r\n      .reduce((acc, p) => (acc > p ? acc : p), 4) + 1;\r\n\r\n  const tuning = tunings[instrument] ?? [null, null, null, null, null, null];\r\n  const reversedTuning = [...tuning].reverse() as Tuning;\r\n\r\n  const reversedStringNotes = reversedPositions.map((p, j) =>\r\n    new Array(maxPosition).fill(undefined).map((_, i) => ({\r\n      isPushed: i === p,\r\n      isMuted: p === null,\r\n      note: transposeNote(reversedTuning[j], i),\r\n    })),\r\n  );\r\n\r\n  return (\r\n    <Table style={{ width: '100%', height: '100%' }}>\r\n      <TableBody>\r\n        {reversedStringNotes.map((s, j) => (\r\n          <TableRow key={j}>\r\n            {s.map(({ isPushed, isMuted, note }, i) => (\r\n              <TableCell\r\n                key={note}\r\n                border={\r\n                  i === 0 && {\r\n                    style: 'solid',\r\n                    side: 'right',\r\n                    size: '2px',\r\n                    color: 'text',\r\n                  }\r\n                }\r\n                align=\"center\"\r\n                pad=\"none\"\r\n              >\r\n                <Box\r\n                  height=\"35px\"\r\n                  border={\r\n                    i !== 0 && [\r\n                      {\r\n                        style: 'solid',\r\n                        side: 'horizontal',\r\n                        size: '1px',\r\n                        color: 'background',\r\n                      },\r\n                      {\r\n                        style: 'solid',\r\n                        side: 'vertical',\r\n                        size: '1px',\r\n                        color: 'text',\r\n                      },\r\n                    ]\r\n                  }\r\n                >\r\n                  {i === 0 || isPushed ? (\r\n                    <Text\r\n                      textAlign=\"center\"\r\n                      color={isPushed ? 'text' : 'text-xweak'}\r\n                      weight={isPushed ? 'bold' : 'normal'}\r\n                    >\r\n                      <FormattedNote note={note} />\r\n                    </Text>\r\n                  ) : (\r\n                    <Text color=\"text-xweak\">{isMuted && '🞩'}</Text>\r\n                  )}\r\n                </Box>\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n\r\n  return (\r\n    <StyledTable>\r\n      <tbody>\r\n        {reversedStringNotes.map((s, j) => (\r\n          <tr key={j}>\r\n            {s.map(({ isPushed, isMuted, note }, i) => (\r\n              <StyledTd key={note} isPushed={isPushed}>\r\n                {i === 0 || isPushed ? (\r\n                  <FormattedNote note={note} />\r\n                ) : (\r\n                  <Text>{isMuted && '🞩'}</Text>\r\n                )}\r\n              </StyledTd>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </StyledTable>\r\n  );\r\n};\r\n\r\nexport default StringChord;\r\n","import { Card, CardBody, CardHeader } from 'grommet';\r\nimport { ChordName } from '../Theory/chords';\r\nimport ChordDefinition from './ChordDefinition';\r\nimport StringChord from './StringChord';\r\n\r\nexport interface Props {\r\n  chord: ChordName;\r\n}\r\n\r\nconst ChordCard = ({ chord }: Props) => (\r\n  <Card>\r\n    <CardHeader pad=\"small\">\r\n      <ChordDefinition chord={chord} />\r\n    </CardHeader>\r\n    <CardBody background=\"background-contrast\" pad=\"small\">\r\n      <StringChord chord={chord} />\r\n    </CardBody>\r\n  </Card>\r\n);\r\n\r\nexport default ChordCard;\r\n","import { Grid, ResponsiveContext } from 'grommet';\r\nimport { useContext } from 'react';\r\nimport { ChordName } from '../Theory/chords';\r\nimport ChordCard from './ChordCard';\r\n\r\nexport interface Props {\r\n  chords: ChordName[];\r\n}\r\n\r\nconst ChordCollection = ({ chords }: Props) => {\r\n  const size = useContext(ResponsiveContext);\r\n\r\n  return (\r\n    <Grid columns=\"medium\" gap=\"small\">\r\n      {chords.map((c) => (\r\n        <ChordCard key={c} chord={c} />\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ChordCollection;\r\n","import { Select } from 'grommet';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport { ChordName } from '../Theory/chords';\r\n\r\nexport interface Props {\r\n  chords: ChordName[];\r\n  onChordSelected: (newSelectedChord: ChordName) => void;\r\n}\r\n\r\nconst ChordSelector = ({ chords, onChordSelected }: Props) => {\r\n  const [selectedChord, setSelectedChord] = useState();\r\n  const [searchString, setSearchString] = useState('');\r\n\r\n  const matchingChords = useMemo(\r\n    () =>\r\n      chords\r\n        .map((c) => ({ label: c, value: c }))\r\n        .filter((x) =>\r\n          x.label.toLowerCase().includes(searchString.toLowerCase()),\r\n        ),\r\n    [chords, searchString],\r\n  );\r\n\r\n  const handleChange = useCallback(\r\n    ({ value }) => {\r\n      setSelectedChord(undefined);\r\n      setSearchString('');\r\n      onChordSelected(value as ChordName);\r\n    },\r\n    [onChordSelected],\r\n  );\r\n\r\n  return (\r\n    <Select\r\n      value={selectedChord}\r\n      options={matchingChords}\r\n      valueKey={{ key: 'value', reduce: true }}\r\n      labelKey={(c) => c.label}\r\n      closeOnChange={false}\r\n      placeholder=\"Add chords\"\r\n      onSearch={setSearchString}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ChordSelector;\r\n","import type { Reducer } from 'react';\r\nimport type { ChordName } from '../Theory/chords';\r\nimport { Action } from './actions';\r\n\r\nexport interface State {\r\n  selectedChords: ChordName[];\r\n}\r\n\r\nexport const initialState: State = {\r\n  selectedChords: ['D', 'G', 'Amin', 'A'],\r\n};\r\n\r\nconst reducer: Reducer<State, Action> = (state, action) => {\r\n  switch (action.type) {\r\n    case 'addChord':\r\n      return !state.selectedChords.find((c) => c === action.chord)\r\n        ? {\r\n            ...state,\r\n            selectedChords: [...state.selectedChords, action.chord],\r\n          }\r\n        : state;\r\n\r\n    case 'removeChord':\r\n      return state.selectedChords.find((c) => c === action.chord)\r\n        ? {\r\n            ...state,\r\n            selectedChords: [\r\n              ...state.selectedChords.filter((c) => c !== action.chord),\r\n            ],\r\n          }\r\n        : state;\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { ChordName } from '../Theory/chords';\r\nimport chords from '../Theory/chords.guitar';\r\nimport type { State } from './reducer';\r\n\r\nexport const getSelectedChords = (state: State) => state.selectedChords;\r\n\r\nexport const getAvailableChords = (state: State) => {\r\n  const selectedChords = getSelectedChords(state);\r\n  const chordsForInstrument = Object.keys(chords['guitar']) as ChordName[];\r\n  return chordsForInstrument.filter((c) => selectedChords.indexOf(c) < 0);\r\n};\r\n","import { DefaultTheme } from 'styled-components';\r\n\r\nexport const theme: DefaultTheme = {};\r\n","import {\r\n  Box,\r\n  Footer,\r\n  Grommet,\r\n  Header,\r\n  Heading,\r\n  Main,\r\n  Text,\r\n  ThemeContext,\r\n} from 'grommet';\r\nimport { grommet } from 'grommet/themes';\r\nimport React, { useCallback, useContext, useReducer } from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport './App.css';\r\nimport ChordCollection from './Components/ChordCollection';\r\nimport ChordSelector from './Components/ChordSelector';\r\nimport * as actions from './Store/actions';\r\nimport reducer, { initialState } from './Store/reducer';\r\nimport * as selectors from './Store/selectors';\r\nimport { theme } from './theme';\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const selectedChords = selectors.getSelectedChords(state);\r\n  const availableChords = selectors.getAvailableChords(state);\r\n\r\n  const handleChordSelected = useCallback(\r\n    (newChord) => dispatch(actions.addChord(newChord)),\r\n    [dispatch],\r\n  );\r\n\r\n  const grommetTheme = useContext(ThemeContext);\r\n  console.log(grommetTheme);\r\n\r\n  return (\r\n    <Grommet full theme={grommet} themeMode=\"dark\">\r\n      <ThemeProvider theme={theme}>\r\n        <Header\r\n          pad={{ vertical: 'small', horizontal: 'large' }}\r\n          background=\"brand\"\r\n        ></Header>\r\n        <Main pad=\"large\" gap=\"medium\">\r\n          <Heading textAlign=\"center\">Chords</Heading>\r\n          <Box>\r\n            <ChordSelector\r\n              chords={availableChords}\r\n              onChordSelected={handleChordSelected}\r\n            />\r\n          </Box>\r\n          <ChordCollection chords={selectedChords} />\r\n        </Main>\r\n        <Footer\r\n          pad={{ vertical: 'small', horizontal: 'large' }}\r\n          background=\"neutral-1\"\r\n          justify=\"center\"\r\n        >\r\n          <Text>Helping you with chords since 2021.</Text>\r\n        </Footer>\r\n      </ThemeProvider>\r\n    </Grommet>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import type { ChordName } from '../Theory/chords';\r\n\r\nexport interface AddChordAction {\r\n  type: 'addChord';\r\n  chord: ChordName;\r\n}\r\n\r\nexport const addChord = (chord: ChordName): AddChordAction => ({\r\n  type: 'addChord',\r\n  chord,\r\n});\r\n\r\nexport interface RemoveChordAction {\r\n  type: 'removeChord';\r\n  chord: ChordName;\r\n}\r\n\r\nexport const removeChord = (chord: ChordName): RemoveChordAction => ({\r\n  type: 'removeChord',\r\n  chord,\r\n});\r\n\r\nexport type Action = AddChordAction | RemoveChordAction;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}