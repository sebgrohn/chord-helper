{"version":3,"sources":["Theory/notes.ts","Theory/chords.ts","Components/FormattedChord.tsx","Components/FormattedNote.tsx","Components/ChordDefinition.tsx","Theory/chords.guitar.ts","Theory/tunings.guitar.ts","Components/StringChord.tsx","Components/ChordCard.tsx","Components/ChordCardCollection.tsx","Components/ChordSelector.tsx","Store/reducer.ts","Store/selectors.ts","theme.ts","App.tsx","Store/actions.ts","reportWebVitals.ts","index.tsx"],"names":["noteNames","notePattern","getNoteParts","note","exec","noteName","octave","Number","parseInt","transposeNoteName","Math","pow","semitoneDistance","index","indexOf","transposeNote","getNoteFromParts","sign","floor","abs","chordDefinitions","maj6","dom7","maj7","aug","aug7","min","min6","min7","chordNamePattern","getChordNameParts","chordName","ChordModifier","styled","span","theme","global","borderSize","small","FormattedChord","chord","rootNoteName","hash","chordModifier","FormattedNote","ChordDefinition","chordNotes","map","x","getChordNotes","Card","pad","horizontal","vertical","background","border","side","color","Heading","level","size","margin","Box","direction","gap","n","Text","chords","guitar","C","D","Dmin","E","Emin","G","A","Amin","B","guitalele","tunings","StyledTable","table","xsmall","colors","dark","PushedNoteCircle","div","StyledTd","td","isStringMuted","isNoteActive","css","isNoteVisible","isNotePushed","StringChord","instrument","chordsForInstrument","stringPositions","reversedPositions","reverse","maxPosition","p","reduce","acc","tuning","reversedTuning","reversedStringNotes","j","Array","fill","undefined","_","i","s","ChordCard","width","CardHeader","CardBody","ChordCardCollection","Grid","columns","justify","c","ChordSelector","onChordSelected","useState","selectedChord","setSelectedChord","searchString","setSearchString","matchingChords","useMemo","label","value","filter","toLowerCase","includes","handleChange","useCallback","Select","options","valueKey","key","labelKey","closeOnChange","placeholder","searchPlaceholder","onSearch","onChange","initialState","selectedChords","reducer","state","action","type","find","Error","getSelectedChords","deepMerge","grommet","black","white","brand","card","container","round","elevation","App","useReducer","dispatch","selectors","availableChords","Object","keys","handleChordSelected","newChord","Grommet","full","themeMode","Header","Main","Footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59de64d1.chunk.js","sourcesContent":["export type NoteName =\r\n  | 'C'\r\n  | 'C#'\r\n  | 'D'\r\n  | 'D#'\r\n  | 'E'\r\n  | 'F'\r\n  | 'F#'\r\n  | 'G'\r\n  | 'G#'\r\n  | 'A'\r\n  | 'A#'\r\n  | 'B';\r\n\r\nexport type OctaveNumber = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\r\n\r\nexport type Note = `${NoteName}${OctaveNumber}`;\r\n\r\nconst noteNames: NoteName[] = [\r\n  'C',\r\n  'C#',\r\n  'D',\r\n  'D#',\r\n  'E',\r\n  'F',\r\n  'F#',\r\n  'G',\r\n  'G#',\r\n  'A',\r\n  'A#',\r\n  'B',\r\n];\r\n\r\n// https://en.wikipedia.org/wiki/Interval_(music)#Main_intervals\r\nexport const intervalNames: Record<number, string> = {\r\n  0: 'perfect unison',\r\n  1: 'minor second',\r\n  2: 'major second',\r\n  3: 'minor third',\r\n  4: 'major third',\r\n  5: 'perfect fourth',\r\n  6: 'augmented fourth/diminished fifth',\r\n  7: 'perfect fifth',\r\n  8: 'minor sixth',\r\n  9: 'major sixth',\r\n  10: 'minor seventh',\r\n  11: 'major seventh',\r\n  12: 'perfect octave',\r\n};\r\n\r\nconst notePattern = /^\\s*([A-G]#?)(\\d)\\s*$/;\r\n\r\nconst getNoteParts = (note: Note): [NoteName, OctaveNumber] => {\r\n  const [_, noteName, octave] = notePattern.exec(note) ?? [];\r\n  return [noteName as NoteName, Number.parseInt(octave) as OctaveNumber];\r\n};\r\n\r\nconst getNoteFromParts = (noteName: NoteName, octave: OctaveNumber): Note =>\r\n  `${noteName}${octave}` as Note;\r\n\r\nexport const isValidNote = (noteString: string): noteString is Note =>\r\n  notePattern.test(noteString);\r\n\r\nexport const getSemitoneDistance = (note1: Note, note2: Note): number => {\r\n  const [noteName1, octave1] = getNoteParts(note1);\r\n  const [noteName2, octave2] = getNoteParts(note2);\r\n  return (\r\n    12 * (octave2 - octave1) +\r\n    (noteNames.indexOf(noteName2) - noteNames.indexOf(noteName1))\r\n  );\r\n};\r\n\r\n// https://en.wikipedia.org/wiki/A440_(pitch_standard)\r\nconst standardPitch = {\r\n  note: 'A4' as Note,\r\n  frequency: 440, // Hz\r\n  semiToneRatio: Math.pow(2, 1 / 12),\r\n};\r\n\r\nexport const getNotePitch = (note: Note): number => {\r\n  const semitoneDistanceFromStandard = getSemitoneDistance(\r\n    standardPitch.note,\r\n    note,\r\n  );\r\n  return (\r\n    standardPitch.frequency *\r\n    Math.pow(standardPitch.semiToneRatio, semitoneDistanceFromStandard)\r\n  );\r\n};\r\n\r\nexport const transposeNoteName = (\r\n  noteName: NoteName,\r\n  semitoneDistance: number,\r\n) => {\r\n  const index = noteNames.indexOf(noteName);\r\n  const transposedIndex = (index + semitoneDistance) % 12;\r\n  return noteNames[transposedIndex];\r\n};\r\n\r\nexport const transposeNote = (note: Note, semitoneDistance: number) => {\r\n  const [noteName, octave] = getNoteParts(note);\r\n  const transposedNoteName = transposeNoteName(noteName, semitoneDistance);\r\n  const octaveDistance =\r\n    Math.sign(semitoneDistance) * Math.floor(Math.abs(semitoneDistance) / 12);\r\n  return getNoteFromParts(\r\n    transposedNoteName,\r\n    (octave + octaveDistance) as OctaveNumber,\r\n  );\r\n};\r\n","import { NoteName, transposeNoteName } from './notes';\r\n\r\nexport type ChordModifier =\r\n  | ''\r\n  | 'maj6'\r\n  | 'dom7'\r\n  | 'maj7'\r\n  | 'aug'\r\n  | 'aug7'\r\n  | 'min'\r\n  | 'min6'\r\n  | 'min7'; // ...more\r\n\r\nexport type ChordName = `${NoteName}${ChordModifier}`;\r\n\r\nexport type ChordDefinition = (\r\n  | 0\r\n  | 1\r\n  | 2\r\n  | 3\r\n  | 4\r\n  | 5\r\n  | 6\r\n  | 7\r\n  | 8\r\n  | 9\r\n  | 10\r\n  | 11\r\n)[];\r\n\r\n// https://en.wikipedia.org/wiki/Chord_(music)#Examples\r\nconst chordDefinitions: Record<ChordModifier, ChordDefinition> = {\r\n  '': [0, 4, 7], // major\r\n  maj6: [0, 4, 7, 9], // major 6th\r\n  dom7: [0, 4, 7, 10], // dominant 7th\r\n  maj7: [0, 4, 7, 11], // major 7th\r\n\r\n  aug: [0, 4, 8], // augmented\r\n  aug7: [0, 4, 8, 10], //augmented 7th\r\n\r\n  min: [0, 3, 7], // minor\r\n  min6: [0, 3, 7, 9], // minor 6th\r\n  min7: [0, 3, 7, 10], // minor 7th\r\n};\r\n\r\nconst chordNamePattern = /^\\s*([A-G]#?)(|maj6|dom7|maj7|aug|aug7|min|min6|min7)\\s*$/;\r\n\r\nconst getChordNameParts = (chordName: ChordName): [NoteName, ChordModifier] => {\r\n  const [_, rootNoteName, chordModifier] =\r\n    chordNamePattern.exec(chordName) ?? [];\r\n  return [rootNoteName as NoteName, chordModifier as ChordModifier];\r\n};\r\n\r\nconst getChordNameFromParts = (\r\n  rootNoteName: NoteName,\r\n  chordModifier: ChordModifier,\r\n): ChordName => `${rootNoteName}${chordModifier}` as ChordName;\r\n\r\nexport const isValidChordName = (\r\n  chordNameString: string,\r\n): chordNameString is ChordName => chordNamePattern.test(chordNameString);\r\n\r\nexport const getChordNotes = (chordName: ChordName): NoteName[] => {\r\n  const [rootNoteName, chordModifier] = getChordNameParts(chordName);\r\n  const chordDefinition = chordDefinitions[chordModifier];\r\n  return chordDefinition.map((x) => transposeNoteName(rootNoteName, x));\r\n};\r\n\r\nexport const transposeChord = (\r\n  chordName: ChordName,\r\n  semitoneDistance: number,\r\n): ChordName => {\r\n  const [rootNoteName, chordModifier] = getChordNameParts(chordName);\r\n  const transposedNoteName = transposeNoteName(rootNoteName, semitoneDistance);\r\n  return getChordNameFromParts(transposedNoteName, chordModifier);\r\n};\r\n","import styled from 'styled-components';\r\nimport { ChordName } from '../Theory/chords';\r\n\r\nconst chordNamePattern = /^\\s*([A-G])(#)?(|maj6|dom7|maj7|aug|aug7|min|min6|min7)\\s*$/;\r\n\r\nconst getNoteParts = (chord: ChordName) => {\r\n  const [_, rootNoteName, hash, chordModifier] =\r\n    chordNamePattern.exec(chord) ?? [];\r\n  return [rootNoteName, hash, chordModifier];\r\n};\r\n\r\nconst ChordModifier = styled.span`\r\n  padding-left: ${({ theme }) => theme.global.borderSize.small};\r\n`;\r\n\r\nexport interface Props {\r\n  chord: ChordName;\r\n}\r\n\r\nconst FormattedChord = ({ chord }: Props) => {\r\n  const [rootNoteName, hash, chordModifier] = getNoteParts(chord);\r\n  return (\r\n    <span>\r\n      {rootNoteName}\r\n      <sup>{hash && '♯'}</sup>\r\n      {chordModifier && <ChordModifier>{chordModifier}</ChordModifier>}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default FormattedChord;\r\n","import { Note, NoteName } from '../Theory/notes';\r\n\r\nconst notePattern = /^\\s*([A-G])(#)?(\\d)?\\s*$/;\r\n\r\nconst getNoteParts = (note: Note | NoteName) => {\r\n  const [_, noteName, hash, octave] = notePattern.exec(note) ?? [];\r\n  return [noteName, hash, octave];\r\n};\r\n\r\nexport interface Props {\r\n  note: Note | NoteName;\r\n}\r\n\r\nconst FormattedNote = ({ note }: Props) => {\r\n  const [noteName, hash, octave] = getNoteParts(note);\r\n  return (\r\n    <span>\r\n      {noteName}\r\n      <sup>{hash && '♯'}</sup>\r\n      {octave && <sub>{octave}</sub>}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default FormattedNote;\r\n","import { Box, Card, Heading, Text } from 'grommet';\r\nimport { ChordName, getChordNotes } from '../Theory/chords';\r\nimport FormattedChord from './FormattedChord';\r\nimport FormattedNote from './FormattedNote';\r\n\r\nexport interface Props {\r\n  chord?: ChordName;\r\n}\r\n\r\nconst ChordDefinition = ({ chord }: Props) => {\r\n  if (!chord) {\r\n    return null;\r\n  }\r\n\r\n  const chordNotes = getChordNotes(chord);\r\n  return (\r\n    <>\r\n      <Card\r\n        pad={{ horizontal: 'medium', vertical: 'small' }}\r\n        background=\"background-front\"\r\n        border={{ side: 'right', color: 'background-contrast' }}\r\n      >\r\n        <Heading level={2} size=\"small\" color=\"accent-1\" margin=\"none\">\r\n          <FormattedChord chord={chord} />\r\n        </Heading>\r\n      </Card>\r\n      <Box\r\n        pad={{ horizontal: 'medium', vertical: 'small' }}\r\n        direction=\"row\"\r\n        gap=\"small\"\r\n      >\r\n        {chordNotes.map((n) => (\r\n          <Text key={n}>\r\n            <FormattedNote note={n} />\r\n          </Text>\r\n        ))}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChordDefinition;\r\n","import { ChordName } from './chords';\r\nimport { InstrumentName } from './tunings.guitar';\r\n\r\ntype StringPositions = (number | null)[];\r\n\r\nconst chords: Record<\r\n  InstrumentName,\r\n  Partial<Record<ChordName, StringPositions>>\r\n> = {\r\n  guitar: {\r\n    C: [null, 3, 2, 0, 1, 0],\r\n    D: [null, null, 0, 2, 3, 2],\r\n    Dmin: [null, null, 0, 2, 3, 1],\r\n    E: [0, 2, 2, 1, 0, 0],\r\n    Emin: [0, 2, 2, 0, 0, 0],\r\n    // F: [1, 3, 3, 2, 1, 1],\r\n    G: [3, 2, 0, 0, 0, 3],\r\n    A: [null, 0, 2, 2, 2, 0],\r\n    Amin: [null, 0, 2, 2, 1, 0],\r\n    B: [null, 2, 4, 4, 4, 2],\r\n  },\r\n  guitalele: {},\r\n};\r\n\r\nexport default chords;\r\n","import { Note } from './notes';\r\n\r\nexport type InstrumentName = 'guitar' | 'guitalele';\r\n\r\nexport type Tuning = Note[];\r\n\r\nconst tunings: Record<InstrumentName, Tuning> = {\r\n  guitar: ['E2', 'A2', 'D3', 'G3', 'B3', 'E4'],\r\n  guitalele: ['A2', 'D3', 'G3', 'C4', 'E4', 'A4'],\r\n};\r\n\r\nexport default tunings;\r\n","import { Text } from 'grommet';\r\nimport styled, { css } from 'styled-components';\r\nimport { ChordName } from '../Theory/chords';\r\nimport chords from '../Theory/chords.guitar';\r\nimport { transposeNote } from '../Theory/notes';\r\nimport tunings, { InstrumentName, Tuning } from '../Theory/tunings.guitar';\r\nimport FormattedNote from './FormattedNote';\r\n\r\nexport interface Props {\r\n  instrument?: InstrumentName;\r\n  chord: ChordName | undefined;\r\n}\r\n\r\nconst StyledTable = styled.table`\r\n  box-sizing: border-box;\r\n\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  text-align: center;\r\n\r\n  td {\r\n    min-width: 70px;\r\n    height: 40px;\r\n\r\n    border-bottom: ${({ theme }) => theme.global.borderSize.xsmall} solid\r\n      ${({ theme }) => theme.global.colors['background-contrast'].dark};\r\n    border-right: ${({ theme }) => theme.global.borderSize.xsmall} solid\r\n      ${({ theme }) => theme.global.colors['text'].dark};\r\n\r\n    &:first-child {\r\n      min-width: 40px;\r\n      border-right-width: ${({ theme }) => theme.global.borderSize.small};\r\n\r\n      background: inherit;\r\n    }\r\n  }\r\n\r\n  tr:last-child > td,\r\n  td:first-child {\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\nconst PushedNoteCircle = styled.div`\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 18px;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledTd = styled.td<{\r\n  isStringMuted: boolean;\r\n  isNoteVisible: boolean;\r\n  isNoteActive: boolean;\r\n  isNotePushed: boolean;\r\n}>`\r\n  ${({ isStringMuted, isNoteActive, theme }) =>\r\n    isStringMuted\r\n      ? css`\r\n          color: ${theme.global.colors['text-xweak'].dark};\r\n        `\r\n      : css`\r\n          background: ${theme.global.colors['background-contrast'].dark};\r\n          color: ${isNoteActive\r\n            ? theme.global.colors['text'].dark\r\n            : theme.global.colors['text-weak'].dark};\r\n        `}\r\n\r\n  font-weight: ${({ isNoteActive }) => (isNoteActive ? 'bold' : 'normal')};\r\n\r\n  ${PushedNoteCircle} {\r\n    display: ${({ isNoteVisible }) =>\r\n      isNoteVisible ? 'inline-block' : 'none'};\r\n\r\n    background: ${({ isNotePushed, theme }) =>\r\n      isNotePushed ? theme.global.colors['border'].dark : 'transparent'};\r\n  }\r\n\r\n  &:hover {\r\n    ${PushedNoteCircle} {\r\n      display: inline-block;\r\n\r\n      background: ${({ isNotePushed, theme }) =>\r\n        isNotePushed\r\n          ? theme.global.colors['accent-1']\r\n          : theme.global.colors['background-contrast'].dark};\r\n\r\n      font-weight: bold;\r\n    }\r\n\r\n    & > :nth-child(2) {\r\n      display: none;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StringChord = ({ instrument = 'guitar', chord }: Props) => {\r\n  const chordsForInstrument = chords[instrument];\r\n  const stringPositions = (chord &&\r\n    chord in chordsForInstrument &&\r\n    chordsForInstrument[chord]) || [null, null, null, null, null, null];\r\n  const reversedPositions = [...stringPositions].reverse();\r\n\r\n  const maxPosition =\r\n    stringPositions\r\n      .map((p) => p ?? 0)\r\n      .reduce((acc, p) => (acc > p ? acc : p), 4) + 1;\r\n\r\n  const tuning = tunings[instrument] ?? [null, null, null, null, null, null];\r\n  const reversedTuning = [...tuning].reverse() as Tuning;\r\n\r\n  const reversedStringNotes = reversedPositions.map((p, j) =>\r\n    new Array(maxPosition).fill(undefined).map((_, i) => ({\r\n      isStringMuted: p === null,\r\n      isNoteVisible: i === p || i === 0,\r\n      isNoteActive: i === p,\r\n      isNotePushed: i === p && i !== 0,\r\n      note: transposeNote(reversedTuning[j], i),\r\n    })),\r\n  );\r\n\r\n  return (\r\n    <StyledTable>\r\n      <tbody>\r\n        {reversedStringNotes.map((s, j) => (\r\n          <tr key={j}>\r\n            {s.map(\r\n              (\r\n                {\r\n                  isStringMuted,\r\n                  isNoteVisible,\r\n                  isNoteActive,\r\n                  isNotePushed,\r\n                  note,\r\n                },\r\n                i,\r\n              ) => (\r\n                <StyledTd\r\n                  key={note}\r\n                  isStringMuted={isStringMuted}\r\n                  isNoteVisible={isNoteVisible}\r\n                  isNoteActive={isNoteActive}\r\n                  isNotePushed={isNotePushed}\r\n                >\r\n                  <PushedNoteCircle>\r\n                    <FormattedNote note={note} />\r\n                  </PushedNoteCircle>\r\n                  {isStringMuted && !isNoteVisible && <Text>🞩</Text>}\r\n                </StyledTd>\r\n              ),\r\n            )}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </StyledTable>\r\n  );\r\n};\r\n\r\nexport default StringChord;\r\n","import { Card, CardBody, CardHeader } from 'grommet';\r\nimport { ChordName } from '../Theory/chords';\r\nimport ChordDefinition from './ChordDefinition';\r\nimport StringChord from './StringChord';\r\n\r\nexport interface Props {\r\n  chord: ChordName;\r\n}\r\n\r\nconst ChordCard = ({ chord }: Props) => (\r\n  <Card background=\"background-back\" width=\"500px\">\r\n    <CardHeader\r\n      background=\"background-contrast\"\r\n      border={{ side: 'bottom', color: 'background-contrast' }}\r\n    >\r\n      <ChordDefinition chord={chord} />\r\n    </CardHeader>\r\n    <CardBody\r\n      pad=\"small\"\r\n      border={{ side: 'top', color: 'background-contrast' }}\r\n    >\r\n      <StringChord chord={chord} />\r\n    </CardBody>\r\n  </Card>\r\n);\r\n\r\nexport default ChordCard;\r\n","import { Grid } from 'grommet';\r\nimport { ChordName } from '../Theory/chords';\r\nimport ChordCard from './ChordCard';\r\n\r\nexport interface Props {\r\n  chords: ChordName[];\r\n}\r\n\r\nconst ChordCardCollection = ({ chords }: Props) => (\r\n  <Grid columns=\"medium\" gap=\"small\" justify=\"center\">\r\n    {chords.map((c) => (\r\n      <ChordCard key={c} chord={c} />\r\n    ))}\r\n  </Grid>\r\n);\r\n\r\nexport default ChordCardCollection;\r\n","import { Select } from 'grommet';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport { ChordName } from '../Theory/chords';\r\n\r\nexport interface Props {\r\n  chords: ChordName[];\r\n  onChordSelected: (newSelectedChord: ChordName) => void;\r\n}\r\n\r\nconst ChordSelector = ({ chords, onChordSelected }: Props) => {\r\n  const [selectedChord, setSelectedChord] = useState();\r\n  const [searchString, setSearchString] = useState('');\r\n\r\n  const matchingChords = useMemo(\r\n    () =>\r\n      chords\r\n        .map((c) => ({ label: c, value: c }))\r\n        .filter((x) =>\r\n          x.label.toLowerCase().includes(searchString.toLowerCase()),\r\n        ),\r\n    [chords, searchString],\r\n  );\r\n\r\n  const handleChange = useCallback(\r\n    ({ value }) => {\r\n      setSelectedChord(undefined);\r\n      setSearchString('');\r\n      onChordSelected(value as ChordName);\r\n    },\r\n    [onChordSelected],\r\n  );\r\n\r\n  return (\r\n    <Select\r\n      value={selectedChord}\r\n      options={matchingChords}\r\n      valueKey={{ key: 'value', reduce: true }}\r\n      labelKey={(c) => c.label}\r\n      closeOnChange={false}\r\n      placeholder=\"Add chords\"\r\n      searchPlaceholder=\"Search by name\"\r\n      onSearch={setSearchString}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ChordSelector;\r\n","import type { Reducer } from 'react';\r\nimport type { ChordName } from '../Theory/chords';\r\nimport { Action } from './actions';\r\n\r\nexport interface State {\r\n  selectedChords: ChordName[];\r\n}\r\n\r\nexport const initialState: State = {\r\n  selectedChords: ['D'],\r\n};\r\n\r\nconst reducer: Reducer<State, Action> = (state, action) => {\r\n  switch (action.type) {\r\n    case 'addChord':\r\n      return !state.selectedChords.find((c) => c === action.chord)\r\n        ? {\r\n            ...state,\r\n            selectedChords: [...state.selectedChords, action.chord],\r\n          }\r\n        : state;\r\n\r\n    case 'removeChord':\r\n      return state.selectedChords.find((c) => c === action.chord)\r\n        ? {\r\n            ...state,\r\n            selectedChords: [\r\n              ...state.selectedChords.filter((c) => c !== action.chord),\r\n            ],\r\n          }\r\n        : state;\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { ChordName } from '../Theory/chords';\r\nimport chords from '../Theory/chords.guitar';\r\nimport type { State } from './reducer';\r\n\r\nexport const getSelectedChords = (state: State) => state.selectedChords;\r\n\r\nexport const getAvailableChords = (state: State) => {\r\n  const selectedChords = getSelectedChords(state);\r\n  const chordsForInstrument = Object.keys(chords['guitar']) as ChordName[];\r\n  return chordsForInstrument.filter((c) => selectedChords.indexOf(c) < 0);\r\n};\r\n","import { grommet } from 'grommet/themes';\r\nimport { deepMerge } from 'grommet/utils';\r\n\r\n// https://www.shutterstock.com/blog/art-deco-graphic-design-techniques\r\nconst goldColor = '#d1ad70'; // gold\r\nconst aquamarineColor = '#87ccb0'; // aquamarine\r\nconst turquoiseColor = '#91d4cf'; // light turquoise\r\nconst navyBlueColorColor = '#15173d'; // navy blue\r\n\r\nconst theme = deepMerge(grommet, {\r\n  global: {\r\n    colors: {\r\n      background: '#010115', // x-darker navy blue\r\n      'background-back': {\r\n        dark: '#080920', // darker navy blue\r\n        // light: '#EDEDED',\r\n      },\r\n      'background-front': {\r\n        dark: navyBlueColorColor,\r\n        // light: '#FFFFFF',\r\n      },\r\n      'background-contrast': {\r\n        dark: '#3f438a17',\r\n        // light: '#33333310',\r\n      },\r\n\r\n      black: '#00010d', // almost black navy blue\r\n      white: '#fff9ef', // almost white gold\r\n\r\n      brand: aquamarineColor,\r\n      'accent-1': goldColor,\r\n\r\n      border: {\r\n        dark: '#d1ad7080', // semitransparent gold\r\n        // light: '#d1ad7080',\r\n      },\r\n    },\r\n  },\r\n\r\n  card: {\r\n    container: {\r\n      border: 'solid',\r\n      round: 'xxsmall',\r\n      elevation: null,\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import { Footer, Grommet, Header, Heading, Main, Text } from 'grommet';\r\nimport React, { useCallback, useReducer } from 'react';\r\nimport './App.css';\r\nimport ChordCardCollection from './Components/ChordCardCollection';\r\nimport ChordSelector from './Components/ChordSelector';\r\nimport * as actions from './Store/actions';\r\nimport reducer, { initialState } from './Store/reducer';\r\nimport * as selectors from './Store/selectors';\r\nimport theme from './theme';\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const selectedChords = selectors.getSelectedChords(state);\r\n  const availableChords = selectors.getAvailableChords(state);\r\n\r\n  const handleChordSelected = useCallback(\r\n    (newChord) => dispatch(actions.addChord(newChord)),\r\n    [dispatch],\r\n  );\r\n\r\n  // const grommetTheme = useContext(ThemeContext);\r\n  // console.log(grommetTheme);\r\n\r\n  return (\r\n    <Grommet full theme={theme} themeMode=\"dark\">\r\n      <Header\r\n        pad={{ vertical: 'medium', horizontal: 'large' }}\r\n        background=\"brand\"\r\n      >\r\n        <Heading size=\"small\" margin=\"none\">\r\n          Chord Helper\r\n        </Heading>\r\n      </Header>\r\n      <Main pad=\"large\" gap=\"medium\">\r\n        <ChordSelector\r\n          chords={availableChords}\r\n          onChordSelected={handleChordSelected}\r\n        />\r\n        <ChordCardCollection chords={selectedChords} />\r\n      </Main>\r\n      <Footer\r\n        pad={{ vertical: 'small', horizontal: 'large' }}\r\n        background=\"black\"\r\n        justify=\"center\"\r\n      >\r\n        <Text color=\"text-xweak\">Helping you with chords since 2021.</Text>\r\n      </Footer>\r\n    </Grommet>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import type { ChordName } from '../Theory/chords';\r\n\r\nexport interface AddChordAction {\r\n  type: 'addChord';\r\n  chord: ChordName;\r\n}\r\n\r\nexport const addChord = (chord: ChordName): AddChordAction => ({\r\n  type: 'addChord',\r\n  chord,\r\n});\r\n\r\nexport interface RemoveChordAction {\r\n  type: 'removeChord';\r\n  chord: ChordName;\r\n}\r\n\r\nexport const removeChord = (chord: ChordName): RemoveChordAction => ({\r\n  type: 'removeChord',\r\n  chord,\r\n});\r\n\r\nexport type Action = AddChordAction | RemoveChordAction;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}