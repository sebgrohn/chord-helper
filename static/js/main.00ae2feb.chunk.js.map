{"version":3,"sources":["Components/Link.tsx","Hooks/useStoringReducer.ts","Store/actions.ts","Theory/chords.guitar.ts","Theory/notes.ts","Theory/chords.ts","Theory/keys.ts","Store/selectors.ts","Pages/NotFoundPage/Components/NotFoundPage.tsx","Pages/NotFoundPage/NotFoundPageContainer.tsx","Components/FormattedChord.tsx","Components/FormattedNote.tsx","Components/FormattedNotes.tsx","Pages/ChordSetPage/Components/ChordDefinition.tsx","Theory/tunings.guitar.ts","Pages/ChordSetPage/Components/StringChord.tsx","Pages/ChordSetPage/Components/ChordCard.tsx","Pages/ChordSetPage/Components/EmptyChordCard.tsx","Pages/ChordSetPage/Components/ChordCardCollection.tsx","Pages/ChordSetPage/Components/ChordSelector.tsx","Pages/ChordSetPage/Components/DetailsBox.tsx","Pages/ChordSetPage/Components/EditButton.tsx","Pages/ChordSetPage/Components/KeySelector.tsx","Pages/ChordSetPage/Components/ChordSetPage.tsx","Pages/ChordSetPage/ChordSetPageContainer.tsx","Pages/ChordSetsPage/Components/ChordBadge.tsx","Pages/ChordSetsPage/Components/ChordSetCard.tsx","Pages/ChordSetsPage/Components/EmptyChordSetCard.tsx","Pages/ChordSetsPage/Components/ChordSetCardCollection.tsx","Pages/ChordSetsPage/Components/ChordSetsPage.tsx","Pages/ChordSetsPage/ChordSetsPageContainer.tsx","Store/migrations.ts","Store/reducer.ts","theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledLink","styled","ReactRouterLink","Link","props","useStoringReducer","key","reducer","migrateState","initialState","initializer","storingReducer","useMemo","writeTimeoutRef","state","action","newState","window","clearTimeout","setTimeout","localStorage","setItem","JSON","stringify","console","log","version","error","createStoringReducer","readState","rawState","getItem","parse","readStoredState","migratedState","useReducer","undefined","setChordSetName","chordSetIndex","newName","type","setChordSetDescription","newDescription","setChordSetKey","newKey","addChordToSet","chordToAdd","removeChordFromSet","chordToRemove","chords","guitar","chord","positions","mutedStrings","guitalele","noteNames","notePattern","getNoteParts","note","exec","noteName","octave","Number","parseInt","transposeNoteName","interval","index","indexOf","chordDefinitions","maj6","dom7","maj7","aug","aug7","min","min6","min7","dim","dim7","chordNamePattern","getChordNameParts","chordName","getChordNameFromParts","rootNoteName","chordModifier","keyDefinitions","keyNamePattern","getKeyNameParts","keyName","getKeyNameFromParts","keyModifier","getChordSets","chordSets","getChordSet","chordSetId","getFilteredChords","chordSetSelector","chordSet","instrumentName","selectedKey","selectedChords","chordsInKey","keyDefinition","map","baseInterval","transposedDefinition","i","matchingChordModifiers","Object","entries","filter","d","every","includes","length","matchingChordModifier","getChordsInKey","filteredChords","c","NotFoundPage","Box","align","DocumentMissing","size","Heading","level","textAlign","Paragraph","to","NotFoundPageContainer","ChordModifier","span","theme","global","borderSize","small","FormattedChord","hash","FormattedNote","FormattedNotes","notes","n","ChordDefinition","isEditing","onRemove","chordNotes","x","getChordNotes","Card","pad","horizontal","vertical","background","border","side","color","margin","direction","gap","top","Text","Collapsible","open","Button","icon","Trash","a11yTitle","onClick","tunings","PushedFingerBox","NoteCircleText","NoteBox","isStringMuted","isActive","colors","dark","isVisible","css","disabled","isPushed","getGridArea","x1","y1","x2","y2","StringChord","instrument","chordType","highlightedNote","onHighlightNote","chordsForInstrument","chordDefinition","stringPositionsParts","stringPositions","pos","fingerIndex","stringIdOrInterval","fretId","Array","isArray","startStringId","endStringId","getStringPositionsParts","maxFretId","reduce","acc","Math","max","tuning","maxStringIndex","strings","_","stringIndex","gridArea","isMuted","frets","fill","isStart","finger","stringNote","stringId","find","semitoneDistance","getNoteFromParts","sign","floor","abs","transposeNote","isHighlighted","Grid","columns","rows","row","alignSelf","s","justify","Close","ChordCard","width","CardHeader","CardBody","EmptyChordCard","Stack","interactiveChild","opacity","Add","ChordCardCollection","onRemoveChord","useState","setHighlightedNote","ChordSelector","onAdd","searchString","setSearchString","matchingChords","label","value","toLowerCase","handleChange","useCallback","Select","options","valueKey","labelKey","closeOnChange","placeholder","searchPlaceholder","onSearch","onChange","DetailsBox","name","description","onSetName","onSetDescription","onIsEditingChange","Keyboard","onEnter","TextInput","plain","event","target","EditButton","Checkmark","Edit","primary","keys","matchingKeys","k","Filter","clear","ChordSetPage","availableKeys","onSetKey","onAddChord","setIsEditing","onEsc","KeySelector","useChordSetDispatch","dispatch","args","ChordSetPageContainer","useParams","allKeys","flatMap","selectors","handleSetName","actions","handleSetDescription","handleSetKey","handleAddChord","handleRemoveChord","ChordBadge","ChordSetCard","isRemoving","setIsRemoving","wrap","EmptyChordSetCard","height","ChordSetCardCollection","onRemoveChordSet","ChordSetsPage","onAddChordSet","ChordSetsPageContainer","handleAddChordSet","handleRemoveChordSet","chordSetToRemoveIndex","migrations","rest","migration","chordSetReducer","newChordSet","goldColor","aquamarineColor","deepMerge","grommet","black","white","brand","font","family","face","heading","button","radius","card","container","round","elevation","App","Grommet","full","themeMode","Header","Main","path","element","Footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.00ae2feb.chunk.js","sourcesContent":["import { Link as ReactRouterLink, LinkProps } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledLink = styled(ReactRouterLink)`\r\n  &:link,\r\n  &:visited {\r\n    color: inherit;\r\n    text-decoration-color: inherit;\r\n  }\r\n`;\r\n\r\nconst Link = (props: LinkProps) => <StyledLink {...props} />;\r\n\r\nexport default Link;\r\n","import {\r\n  Dispatch,\r\n  Reducer,\r\n  ReducerAction,\r\n  ReducerState,\r\n  useMemo,\r\n  useReducer,\r\n} from 'react';\r\n\r\nexport interface StoredState extends Record<any, any> {\r\n  version?: number;\r\n}\r\n\r\nconst createStoringReducer = <S extends StoredState, A>(\r\n  key: string,\r\n  reducer: Reducer<S, A>,\r\n): Reducer<S, A> => {\r\n  let writeTimeoutRef: number | undefined;\r\n\r\n  const storingReducer: Reducer<S, A> = (state, action) => {\r\n    const newState = reducer(state, action);\r\n\r\n    if (newState !== state) {\r\n      window.clearTimeout(writeTimeoutRef);\r\n\r\n      writeTimeoutRef = window.setTimeout(() => {\r\n        try {\r\n          localStorage.setItem(key, JSON.stringify(newState));\r\n          console.log(\r\n            `Written to local storage (version: ${newState.version})`,\r\n            newState,\r\n          );\r\n        } catch (error) {\r\n          // TODO\r\n          console.error(\"Couldn't write to local storage.\", error);\r\n        }\r\n      }, 100);\r\n    }\r\n\r\n    return newState;\r\n  };\r\n\r\n  return storingReducer;\r\n};\r\n\r\nconst readStoredState = <S extends StoredState>(key: string): S | undefined => {\r\n  try {\r\n    const rawState = localStorage.getItem(key);\r\n    const readState = rawState && JSON.parse(rawState);\r\n    console.log(\r\n      `Read from local storage (version: ${readState?.version})`,\r\n      readState,\r\n    );\r\n    return readState;\r\n  } catch (error) {\r\n    // TODO\r\n    console.error(\"Couldn't read from local storage.\", error);\r\n  }\r\n};\r\n\r\nconst useStoringReducer = <R extends Reducer<any, any>, S extends StoredState>(\r\n  key: string,\r\n  reducer: R,\r\n  migrateState: (readState: StoredState) => S,\r\n  initialState: S,\r\n  initializer?: undefined,\r\n): [ReducerState<R>, Dispatch<ReducerAction<R>>] => {\r\n  const storingReducer = useMemo(\r\n    () => createStoringReducer(key, reducer),\r\n    [key, reducer],\r\n  );\r\n  const readState = useMemo(() => readStoredState(key), [key]);\r\n\r\n  const migratedState = useMemo(\r\n    () => migrateState(readState ?? initialState),\r\n    [migrateState, readState, initialState],\r\n  );\r\n\r\n  return useReducer(\r\n    storingReducer,\r\n    migratedState,\r\n    readState ? undefined : initializer,\r\n  );\r\n};\r\n\r\nexport default useStoringReducer;\r\n","import type { ChordName } from '../Theory/chords';\r\nimport type { KeyName } from '../Theory/keys';\r\n\r\nexport interface AddChordSetAction {\r\n  type: 'addChordSet';\r\n}\r\n\r\nexport const addChordSet = (): AddChordSetAction => ({\r\n  type: 'addChordSet',\r\n});\r\n\r\nexport interface RemoveChordSetAction {\r\n  type: 'removeChordSet';\r\n  chordSetToRemoveIndex: number;\r\n}\r\n\r\nexport const removeChordSet = (\r\n  chordSetToRemoveIndex: number,\r\n): RemoveChordSetAction => ({\r\n  type: 'removeChordSet',\r\n  chordSetToRemoveIndex,\r\n});\r\n\r\nexport interface SetChordSetNameAction {\r\n  type: 'setChordSetName';\r\n  chordSetIndex: number;\r\n  newName: string;\r\n}\r\n\r\nexport const setChordSetName = (\r\n  chordSetIndex: number,\r\n  newName: string,\r\n): SetChordSetNameAction => ({\r\n  type: 'setChordSetName',\r\n  chordSetIndex,\r\n  newName,\r\n});\r\n\r\nexport interface SetChordSetDescriptionAction {\r\n  type: 'setChordSetDescription';\r\n  chordSetIndex: number;\r\n  newDescription: string;\r\n}\r\n\r\nexport const setChordSetDescription = (\r\n  chordSetIndex: number,\r\n  newDescription: string,\r\n): SetChordSetDescriptionAction => ({\r\n  type: 'setChordSetDescription',\r\n  chordSetIndex,\r\n  newDescription,\r\n});\r\n\r\nexport interface SetChordSetKeyAction {\r\n  type: 'setChordSetKey';\r\n  chordSetIndex: number;\r\n  newKey?: KeyName;\r\n}\r\n\r\nexport const setChordSetKey = (\r\n  chordSetIndex: number,\r\n  newKey?: KeyName,\r\n): SetChordSetKeyAction => ({\r\n  type: 'setChordSetKey',\r\n  chordSetIndex,\r\n  newKey,\r\n});\r\n\r\nexport interface AddChordToSetAction {\r\n  type: 'addChordToSet';\r\n  chordSetIndex: number;\r\n  chordToAdd: ChordName;\r\n}\r\n\r\nexport const addChordToSet = (\r\n  chordSetIndex: number,\r\n  chordToAdd: ChordName,\r\n): AddChordToSetAction => ({\r\n  type: 'addChordToSet',\r\n  chordSetIndex,\r\n  chordToAdd,\r\n});\r\n\r\nexport interface RemoveChordFromSetAction {\r\n  type: 'removeChordFromSet';\r\n  chordSetIndex: number;\r\n  chordToRemove: ChordName;\r\n}\r\n\r\nexport const removeChordFromSet = (\r\n  chordSetIndex: number,\r\n  chordToRemove: ChordName,\r\n): RemoveChordFromSetAction => ({\r\n  type: 'removeChordFromSet',\r\n  chordSetIndex,\r\n  chordToRemove,\r\n});\r\n\r\nexport type Action =\r\n  | AddChordSetAction\r\n  | RemoveChordSetAction\r\n  | SetChordSetNameAction\r\n  | SetChordSetDescriptionAction\r\n  | SetChordSetKeyAction\r\n  | AddChordToSetAction\r\n  | RemoveChordFromSetAction;\r\n","import { ChordName } from './chords';\r\nimport { InstrumentName } from './tunings.guitar';\r\n\r\nexport type ChordType = 'simple' | 'barre';\r\n\r\n/**\r\n * 1 = lowest string, 6 = highest string.\r\n */\r\nexport type StringId = 1 | 2 | 3 | 4 | 5 | 6;\r\n\r\ntype StringInterval = [\r\n  /** From string (inclusive) */\r\n  StringId,\r\n  /** To string (inclusive) */\r\n  StringId,\r\n];\r\n\r\nexport type FretId =\r\n  | 1\r\n  | 2\r\n  | 3\r\n  | 4\r\n  | 5\r\n  | 6\r\n  | 7\r\n  | 8\r\n  | 9\r\n  | 10\r\n  | 11\r\n  | 12\r\n  | 13\r\n  | 14\r\n  | 15\r\n  | 16\r\n  | 17\r\n  | 18\r\n  | 19;\r\n\r\ntype StringPosition = [StringId | StringInterval, FretId];\r\n\r\n/**\r\n * String and fret position (or null for unused), per finger (index -> pinky).\r\n */\r\ntype StringPositions = [\r\n  /** Index finger */\r\n  StringPosition | null,\r\n  /** Middle finger */\r\n  StringPosition | null,\r\n  /** Ring finger */\r\n  StringPosition | null,\r\n  /** Pinky finger */\r\n  StringPosition | null,\r\n];\r\n\r\nexport interface ChordDefinition {\r\n  chord: ChordName;\r\n  type: ChordType;\r\n  positions: StringPositions;\r\n  mutedStrings: StringId[];\r\n}\r\n\r\nconst chords: Record<InstrumentName, ChordDefinition[]> = {\r\n  guitar: [\r\n    {\r\n      chord: 'C',\r\n      type: 'simple',\r\n      positions: [[5, 1], [3, 2], [2, 3], null],\r\n      mutedStrings: [1],\r\n    },\r\n    // { chord: 'Cmin', type: '', positions: [], mutedStrings: [] },\r\n    {\r\n      chord: 'D',\r\n      type: 'simple',\r\n      positions: [[4, 2], [6, 2], [5, 3], null],\r\n      mutedStrings: [1, 2],\r\n    },\r\n    {\r\n      chord: 'Dmin',\r\n      type: 'simple',\r\n      positions: [[6, 1], [4, 2], [5, 3], null],\r\n      mutedStrings: [1, 2],\r\n    },\r\n    {\r\n      chord: 'E',\r\n      type: 'simple',\r\n      positions: [[4, 1], [2, 2], [3, 2], null],\r\n      mutedStrings: [],\r\n    },\r\n    {\r\n      chord: 'Emin',\r\n      type: 'simple',\r\n      positions: [null, [2, 2], [3, 2], null],\r\n      mutedStrings: [],\r\n    },\r\n    {\r\n      chord: 'F',\r\n      type: 'barre',\r\n      positions: [\r\n        [[1, 6], 1],\r\n        [4, 2],\r\n        [2, 3],\r\n        [3, 3],\r\n      ],\r\n      mutedStrings: [],\r\n    },\r\n    // { chord: 'Fmin', type: '', positions: [], mutedStrings: [] },\r\n    {\r\n      chord: 'G',\r\n      type: 'simple',\r\n      positions: [[2, 2], [1, 3], [6, 3], null],\r\n      mutedStrings: [],\r\n    },\r\n    // { chord: 'Gmin', type: '', positions: [], mutedStrings: [] },\r\n    {\r\n      chord: 'A',\r\n      type: 'simple',\r\n      positions: [[3, 2], [4, 2], [5, 2], null],\r\n      mutedStrings: [1],\r\n    },\r\n    {\r\n      chord: 'Amin',\r\n      type: 'simple',\r\n      positions: [[5, 1], [3, 2], [4, 2], null],\r\n      mutedStrings: [1],\r\n    },\r\n    {\r\n      chord: 'B',\r\n      type: 'barre',\r\n      positions: [\r\n        [[2, 6], 2],\r\n        [3, 4],\r\n        [4, 4],\r\n        [5, 4],\r\n      ],\r\n      mutedStrings: [1],\r\n    },\r\n    // { chord: 'Bmin', type: '', positions: [], mutedStrings: [] },\r\n  ],\r\n  guitalele: [],\r\n};\r\n\r\nexport const getAvailableChords = (instrumentName: InstrumentName) =>\r\n  chords[instrumentName].map((c) => c.chord);\r\n\r\nexport const getStringPositionsParts = (stringPositions: StringPositions) =>\r\n  stringPositions\r\n    .map((pos, fingerIndex) => ({ pos, fingerIndex }))\r\n    .filter(\r\n      (x): x is { pos: StringPosition; fingerIndex: number } => x.pos != null,\r\n    )\r\n    .map(({ pos, fingerIndex }) => {\r\n      const [stringIdOrInterval, fretId] = pos;\r\n      const [startStringId, endStringId] = Array.isArray(stringIdOrInterval)\r\n        ? stringIdOrInterval\r\n        : [stringIdOrInterval, stringIdOrInterval];\r\n\r\n      return {\r\n        startStringId,\r\n        endStringId,\r\n        fretId,\r\n        fingerIndex,\r\n      };\r\n    });\r\n\r\nexport default chords;\r\n","export type NoteName =\r\n  | 'C'\r\n  | 'C#'\r\n  | 'D'\r\n  | 'D#'\r\n  | 'E'\r\n  | 'F'\r\n  | 'F#'\r\n  | 'G'\r\n  | 'G#'\r\n  | 'A'\r\n  | 'A#'\r\n  | 'B';\r\n\r\nexport type Octave = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\r\n\r\nexport type Note = `${NoteName}${Octave}`;\r\n\r\nexport const noteNames: NoteName[] = [\r\n  'C',\r\n  'C#',\r\n  'D',\r\n  'D#',\r\n  'E',\r\n  'F',\r\n  'F#',\r\n  'G',\r\n  'G#',\r\n  'A',\r\n  'A#',\r\n  'B',\r\n];\r\n\r\n// https://en.wikipedia.org/wiki/Interval_(music)#Main_intervals\r\nexport type IntervalPerfectUnison = 0;\r\nexport type IntervalMinorSecond = 1;\r\nexport type IntervalMajorSecond = 2;\r\nexport type IntervalMinorThird = 3;\r\nexport type IntervalMajorThird = 4;\r\nexport type IntervalPerfectFourth = 5;\r\nexport type IntervalAugmentedFourth = 6;\r\nexport type IntervalDiminishedFifth = 6;\r\nexport type IntervalPerfectFifth = 7;\r\nexport type IntervalMinorSixth = 8;\r\nexport type IntervalMajorSixth = 9;\r\nexport type IntervalMinorSeventh = 10;\r\nexport type IntervalMajorSeventh = 11;\r\nexport type IntervalPerfectOctave = 12;\r\n\r\nexport type Interval =\r\n  | IntervalPerfectUnison\r\n  | IntervalMinorSecond\r\n  | IntervalMajorSecond\r\n  | IntervalMinorThird\r\n  | IntervalMajorThird\r\n  | IntervalPerfectFourth\r\n  | IntervalAugmentedFourth\r\n  | IntervalDiminishedFifth\r\n  | IntervalPerfectFifth\r\n  | IntervalMinorSixth\r\n  | IntervalMajorSixth\r\n  | IntervalMinorSeventh\r\n  | IntervalMajorSeventh;\r\n\r\nexport type IntervalWithPerfectOctave = Interval | IntervalPerfectOctave;\r\n\r\nconst notePattern = /^\\s*([A-G]#?)(\\d)\\s*$/;\r\n\r\nexport const getNoteParts = (note: Note): [NoteName, Octave] => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, noteName, octave] = notePattern.exec(note) ?? [];\r\n  return [noteName as NoteName, Number.parseInt(octave) as Octave];\r\n};\r\n\r\nconst getNoteFromParts = (noteName: NoteName, octave: Octave): Note =>\r\n  `${noteName}${octave}` as Note;\r\n\r\nexport const transposeNoteName = (\r\n  noteName: NoteName,\r\n  interval: IntervalWithPerfectOctave,\r\n) => {\r\n  const index = noteNames.indexOf(noteName);\r\n  const transposedIndex = (index + interval) % 12;\r\n  return noteNames[transposedIndex];\r\n};\r\n\r\nexport const transposeNote = (note: Note, semitoneDistance: number) => {\r\n  const [noteName, octave] = getNoteParts(note);\r\n  const transposedNoteName = transposeNoteName(\r\n    noteName,\r\n    (semitoneDistance % 12) as Interval,\r\n  );\r\n  const octaveDistance =\r\n    Math.sign(semitoneDistance) * Math.floor(Math.abs(semitoneDistance) / 12);\r\n  return getNoteFromParts(\r\n    transposedNoteName,\r\n    (octave + octaveDistance) as Octave,\r\n  );\r\n};\r\n","import type { Interval, IntervalWithPerfectOctave, NoteName } from './notes';\r\nimport { transposeNoteName } from './notes';\r\n\r\nexport type ChordModifier =\r\n  | ''\r\n  | 'maj6'\r\n  | 'dom7'\r\n  | 'maj7'\r\n  | 'aug'\r\n  | 'aug7'\r\n  | 'min'\r\n  | 'min6'\r\n  | 'min7'\r\n  | 'dim'\r\n  | 'dim7'; // ...more\r\n\r\nexport type ChordName = `${NoteName}${ChordModifier}`;\r\n\r\nexport type ChordDefinition = Interval[];\r\n\r\n// https://en.wikipedia.org/wiki/Chord_(music)#Examples\r\nexport const chordDefinitions: Record<ChordModifier, ChordDefinition> = {\r\n  '': [0, 4, 7], // major\r\n  maj6: [0, 4, 7, 9], // major 6th\r\n  dom7: [0, 4, 7, 10], // dominant 7th\r\n  maj7: [0, 4, 7, 11], // major 7th\r\n\r\n  aug: [0, 4, 8], // augmented\r\n  aug7: [0, 4, 8, 10], //augmented 7th\r\n\r\n  min: [0, 3, 7], // minor\r\n  min6: [0, 3, 7, 9], // minor 6th\r\n  min7: [0, 3, 7, 10], // minor 7th\r\n\r\n  dim: [0, 3, 6], // diminished\r\n  dim7: [0, 3, 6, 9], // diminished 7th\r\n};\r\n\r\nconst chordNamePattern =\r\n  /^\\s*([A-G]#?)(|maj6|dom7|maj7|aug|aug7|min|min6|min7)\\s*$/;\r\n\r\nconst getChordNameParts = (chordName: ChordName): [NoteName, ChordModifier] => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, rootNoteName, chordModifier] =\r\n    chordNamePattern.exec(chordName) ?? [];\r\n  return [rootNoteName as NoteName, chordModifier as ChordModifier];\r\n};\r\n\r\nexport const getChordNameFromParts = (\r\n  rootNoteName: NoteName,\r\n  chordModifier: ChordModifier,\r\n): ChordName => `${rootNoteName}${chordModifier}` as ChordName;\r\n\r\nexport const getChordNotes = (chordName: ChordName): NoteName[] => {\r\n  const [rootNoteName, chordModifier] = getChordNameParts(chordName);\r\n  const chordDefinition = chordDefinitions[chordModifier];\r\n  return chordDefinition.map((x) => transposeNoteName(rootNoteName, x));\r\n};\r\n\r\nexport const transposeChord = (\r\n  chordName: ChordName,\r\n  interval: IntervalWithPerfectOctave,\r\n): ChordName => {\r\n  const [rootNoteName, chordModifier] = getChordNameParts(chordName);\r\n  const transposedNoteName = transposeNoteName(rootNoteName, interval);\r\n  return getChordNameFromParts(transposedNoteName, chordModifier);\r\n};\r\n","import type { ChordDefinition, ChordModifier, ChordName } from './chords';\r\nimport { chordDefinitions, getChordNameFromParts } from './chords';\r\nimport type { Interval, IntervalWithPerfectOctave, NoteName } from './notes';\r\nimport { noteNames, transposeNoteName } from './notes';\r\n\r\nexport type KeyModifier = '' | 'min'; // ...more\r\n\r\nexport type KeyName = `${NoteName}${KeyModifier}`;\r\n\r\nexport type KeyDefinition = Interval[];\r\n\r\nconst keyDefinitions: Record<KeyModifier, KeyDefinition> = {\r\n  '': [0, 2, 4, 5, 7, 9, 11], // major\r\n  min: [0, 2, 3, 5, 7, 8, 10], // minor\r\n};\r\n\r\nconst keyNamePattern = /^\\s*([A-G]#?)(|min)\\s*$/;\r\n\r\nconst getKeyNameParts = (keyName: KeyName): [NoteName, KeyModifier] => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, rootNoteName, keyModifier] = keyNamePattern.exec(keyName) ?? [];\r\n  return [rootNoteName as NoteName, keyModifier as KeyModifier];\r\n};\r\n\r\nconst getKeyNameFromParts = (\r\n  rootNoteName: NoteName,\r\n  keyModifier: KeyModifier,\r\n): KeyName => `${rootNoteName}${keyModifier}` as KeyName;\r\n\r\nexport const getAllKeys = (): KeyName[] =>\r\n  noteNames.flatMap((n) =>\r\n    (Object.keys(keyDefinitions) as KeyModifier[]).map((k) =>\r\n      getKeyNameFromParts(n, k),\r\n    ),\r\n  );\r\n\r\nexport const getKeyNotes = (keyName: KeyName): NoteName[] => {\r\n  const [rootNoteName, keyModifier] = getKeyNameParts(keyName);\r\n  const chordDefinition = keyDefinitions[keyModifier];\r\n  return chordDefinition.map((x) => transposeNoteName(rootNoteName, x));\r\n};\r\n\r\nexport const transposeKey = (\r\n  keyName: KeyName,\r\n  interval: IntervalWithPerfectOctave,\r\n): KeyName => {\r\n  const [rootNoteName, keyModifier] = getKeyNameParts(keyName);\r\n  const transposedNoteName = transposeNoteName(rootNoteName, interval);\r\n  return getKeyNameFromParts(transposedNoteName, keyModifier);\r\n};\r\n\r\nexport const getChordsInKey = (keyName: KeyName): ChordName[] => {\r\n  const [rootNoteName, keyModifier] = getKeyNameParts(keyName);\r\n\r\n  const keyDefinition = keyDefinitions[keyModifier];\r\n\r\n  return keyDefinition.map((baseInterval) => {\r\n    const transposedDefinition = keyDefinition.map(\r\n      (i) => ((i - baseInterval + 12) % 12) as Interval,\r\n    );\r\n\r\n    const matchingChordModifiers = (\r\n      Object.entries(chordDefinitions) as [ChordModifier, ChordDefinition][]\r\n    ).filter(\r\n      ([_, d]) =>\r\n        d.every((i) => transposedDefinition.includes(i)) && d.length === 3,\r\n    );\r\n    if (matchingChordModifiers.length !== 1) {\r\n      console.log(transposedDefinition, matchingChordModifiers);\r\n    }\r\n\r\n    const [matchingChordModifier] = matchingChordModifiers[0] ?? [];\r\n    return getChordNameFromParts(\r\n      transposeNoteName(rootNoteName, baseInterval),\r\n      matchingChordModifier!,\r\n    );\r\n  });\r\n};\r\n","import { getAvailableChords } from '../Theory/chords.guitar';\r\nimport { getChordsInKey } from '../Theory/keys';\r\nimport type { ChordSet, State } from './Types/State';\r\n\r\nexport const getChordSets = (state: State) => state.chordSets;\r\n\r\nexport const getChordSet =\r\n  (chordSetId: number) =>\r\n  (state: State): ChordSet | undefined =>\r\n    getChordSets(state)[chordSetId];\r\n\r\nexport const getFilteredChords = (chordSetId: number) => {\r\n  const chordSetSelector = getChordSet(chordSetId);\r\n\r\n  return (state: State) => {\r\n    const chordSet = chordSetSelector(state);\r\n    if (!chordSet) {\r\n      return undefined;\r\n    }\r\n\r\n    const { selectedKey, selectedChords } = chordSet;\r\n    const chordsInKey = selectedKey && getChordsInKey(selectedKey);\r\n\r\n    const filteredChords = getAvailableChords('guitar').filter(\r\n      (c) => selectedChords.indexOf(c) < 0,\r\n    );\r\n\r\n    return chordsInKey\r\n      ? filteredChords.filter((c) => chordsInKey.includes(c))\r\n      : filteredChords;\r\n  };\r\n};\r\n","import { Box, Heading, Paragraph } from 'grommet';\r\nimport { DocumentMissing } from 'grommet-icons';\r\nimport Link from '../../../Components/Link';\r\n\r\nconst NotFoundPage = () => (\r\n  <Box align=\"center\">\r\n    <DocumentMissing size=\"large\" />\r\n    <Heading level={2} textAlign=\"center\">\r\n      Page not found\r\n    </Heading>\r\n    <Paragraph textAlign=\"center\">\r\n      This page doesn't exist. <Link to=\"/\">Go back.</Link>\r\n    </Paragraph>\r\n  </Box>\r\n);\r\n\r\nexport default NotFoundPage;\r\n","import NotFoundPage from './Components/NotFoundPage';\r\n\r\nconst NotFoundPageContainer = () => <NotFoundPage />;\r\n\r\nexport default NotFoundPageContainer;\r\n","import styled from 'styled-components';\r\nimport { ChordName } from '../Theory/chords';\r\n\r\nconst chordNamePattern =\r\n  /^\\s*([A-G])(#)?(|maj6|dom7|maj7|aug|aug7|min|min6|min7)\\s*$/;\r\n\r\nconst getNoteParts = (chord: ChordName) => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, rootNoteName, hash, chordModifier] =\r\n    chordNamePattern.exec(chord) ?? [];\r\n  return [rootNoteName, hash, chordModifier];\r\n};\r\n\r\nconst ChordModifier = styled.span`\r\n  padding-left: ${({ theme }) => theme.global.borderSize.small};\r\n`;\r\n\r\nexport interface Props {\r\n  chord: ChordName | undefined;\r\n}\r\n\r\nconst FormattedChord = ({ chord }: Props) => {\r\n  const [rootNoteName, hash, chordModifier] = chord ? getNoteParts(chord) : [];\r\n  return (\r\n    <span>\r\n      {rootNoteName || <>&nbsp;</>}\r\n      <sup>{hash && '♯'}</sup>\r\n      {chordModifier && <ChordModifier>{chordModifier}</ChordModifier>}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default FormattedChord;\r\n","import { Note, NoteName } from '../Theory/notes';\r\n\r\nconst notePattern = /^\\s*([A-G])(#)?(\\d)?\\s*$/;\r\n\r\nconst getNoteParts = (note: Note | NoteName) => {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [_, noteName, hash, octave] = notePattern.exec(note) ?? [];\r\n  return [noteName, hash, octave];\r\n};\r\n\r\nexport interface Props {\r\n  note: Note | NoteName;\r\n}\r\n\r\nconst FormattedNote = ({ note }: Props) => {\r\n  const [noteName, hash, octave] = getNoteParts(note);\r\n  return (\r\n    <span>\r\n      {noteName}\r\n      <sup>{hash && '♯'}</sup>\r\n      {octave && <sub>{octave}</sub>}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default FormattedNote;\r\n","import { Fragment } from 'react';\r\nimport { Note, NoteName } from '../Theory/notes';\r\nimport FormattedNote from './FormattedNote';\r\n\r\nexport interface Props {\r\n  notes: (Note | NoteName)[];\r\n}\r\n\r\nconst FormattedNotes = ({ notes }: Props) => (\r\n  <>\r\n    {notes.map((n, i) => (\r\n      <Fragment key={n}>\r\n        {i !== 0 && ' '}\r\n        <FormattedNote note={n} />\r\n      </Fragment>\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default FormattedNotes;\r\n","import { Box, Button, Card, Collapsible, Heading, Text } from 'grommet';\r\nimport { Trash } from 'grommet-icons';\r\nimport FormattedChord from '../../../Components/FormattedChord';\r\nimport FormattedNotes from '../../../Components/FormattedNotes';\r\nimport { ChordName, getChordNotes } from '../../../Theory/chords';\r\n\r\nexport interface Props {\r\n  chord: ChordName | undefined;\r\n  isEditing: boolean;\r\n  onRemove?: () => void;\r\n}\r\n\r\nconst ChordDefinition = ({ chord, isEditing, onRemove }: Props) => {\r\n  const chordNotes = chord ? getChordNotes(chord) : [];\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        pad={{ horizontal: 'medium', vertical: 'small' }}\r\n        background=\"background-front\"\r\n        border={{ side: 'right', color: 'background-contrast' }}\r\n      >\r\n        <Heading level={3} size=\"medium\" color=\"accent-1\" margin=\"none\">\r\n          <FormattedChord chord={chord} />\r\n        </Heading>\r\n      </Card>\r\n      <Box\r\n        direction=\"row\"\r\n        pad={{ horizontal: 'small' }}\r\n        gap=\"small\"\r\n        align=\"center\"\r\n      >\r\n        <Box pad={{ top: 'xsmall' }}>\r\n          <Text>\r\n            <FormattedNotes notes={chordNotes} />\r\n          </Text>\r\n        </Box>\r\n        <Collapsible open={isEditing} direction=\"horizontal\">\r\n          <Button\r\n            icon={<Trash />}\r\n            a11yTitle={`Remove chord ${chord}`}\r\n            onClick={onRemove}\r\n          />\r\n        </Collapsible>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChordDefinition;\r\n","import { Note } from './notes';\r\n\r\nexport type InstrumentName = 'guitar' | 'guitalele';\r\n\r\nexport type Tuning = Note[];\r\n\r\nconst tunings: Record<InstrumentName, Tuning> = {\r\n  guitar: ['E2', 'A2', 'D3', 'G3', 'B3', 'E4'],\r\n  guitalele: ['A2', 'D3', 'G3', 'C4', 'E4', 'A4'],\r\n};\r\n\r\nexport default tunings;\r\n","import { Box, Grid, Text } from 'grommet';\r\nimport { Close } from 'grommet-icons';\r\nimport styled, { css } from 'styled-components';\r\nimport FormattedNote from '../../../Components/FormattedNote';\r\nimport { ChordName } from '../../../Theory/chords';\r\nimport chords, {\r\n  ChordType,\r\n  FretId,\r\n  getStringPositionsParts,\r\n  StringId,\r\n} from '../../../Theory/chords.guitar';\r\nimport { getNoteParts, NoteName, transposeNote } from '../../../Theory/notes';\r\nimport tunings, { InstrumentName } from '../../../Theory/tunings.guitar';\r\n\r\nconst PushedFingerBox = styled(Box)`\r\n  width: 36px;\r\n  height: calc(100% - 12px);\r\n  justify-self: center;\r\n  border-radius: 18px;\r\n`;\r\n\r\nconst NoteCircleText = styled(Text)`\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 18px;\r\n  text-align: center;\r\n`;\r\n\r\nconst NoteBox = styled(Box)<{\r\n  disabled: boolean;\r\n  isStringMuted: boolean;\r\n  isVisible: boolean;\r\n  isActive: boolean;\r\n  isPushed: boolean;\r\n}>`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  color: ${({ isStringMuted, isActive, theme }) =>\r\n    isStringMuted\r\n      ? theme.global.colors['text-xweak'].dark\r\n      : isActive\r\n      ? theme.global.colors['text'].dark\r\n      : theme.global.colors['text-weak'].dark};\r\n\r\n  font-weight: ${({ isActive }) => (isActive ? 'bold' : 'normal')};\r\n\r\n  ${NoteCircleText} {\r\n    display: ${({ isVisible }) => (isVisible ? 'inline-block' : 'none')};\r\n  }\r\n\r\n  ${({ isVisible }) =>\r\n    isVisible &&\r\n    css`\r\n      & > :nth-child(2) {\r\n        display: none;\r\n      }\r\n    `}\r\n\r\n  ${({ disabled, isPushed, theme }) =>\r\n    !disabled &&\r\n    css`\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n        ${NoteCircleText} {\r\n          display: inline-block;\r\n\r\n          background: ${isPushed\r\n            ? theme.global.colors['accent-1']\r\n            : theme.global.colors['background-contrast'].dark};\r\n\r\n          font-weight: bold;\r\n        }\r\n\r\n        & > :nth-child(2) {\r\n          display: none;\r\n        }\r\n      }\r\n    `}\r\n`;\r\n\r\n/**\r\n * All parameters are zero-based, inclusive.\r\n *\r\n * @param x1 Start column (zero-based, inclusive)\r\n * @param y1 Start row (zero-based, inclusive)\r\n * @param x2 Optional end column (zero-based, inclusive), defaults to `x1`\r\n * @param y2 Optional end row (zero-based, inclusive), defaults to `y1`\r\n */\r\nconst getGridArea = (x1: number, y1: number, x2?: number, y2?: number) =>\r\n  `${y1 + 1}/${x1 + 1} / ${(y2 ?? y1) + 1 + 1}/${(x2 ?? x1) + 1 + 1}`;\r\n\r\nexport interface Props {\r\n  instrument?: InstrumentName;\r\n  chord: ChordName | undefined;\r\n  chordType?: ChordType;\r\n  disabled: boolean;\r\n  highlightedNote: NoteName | undefined;\r\n  onHighlightNote: ((noteToSelect: NoteName | undefined) => void) | undefined;\r\n}\r\n\r\nconst StringChord = ({\r\n  instrument = 'guitar',\r\n  chord,\r\n  chordType = 'simple',\r\n  disabled,\r\n  highlightedNote,\r\n  onHighlightNote,\r\n}: Props) => {\r\n  const chordsForInstrument = chords[instrument] || [];\r\n\r\n  const chordDefinitions =\r\n    (chord && chordsForInstrument.filter((c) => c.chord === chord)) ?? [];\r\n  const chordDefinitionsForType = chordDefinitions.filter(\r\n    (c) => c.type === chordType,\r\n  );\r\n  const chordDefinition = chordDefinitionsForType[0] ?? chordDefinitions[0];\r\n\r\n  const stringPositions = chordDefinition?.positions ?? [\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n  ];\r\n  const stringPositionsParts = getStringPositionsParts(stringPositions);\r\n  const mutedStrings = chordDefinition?.mutedStrings ?? [];\r\n\r\n  const maxFretId = (stringPositionsParts.reduce(\r\n    (acc, { fretId }) => Math.max(acc, fretId),\r\n    4,\r\n  ) + 1) as FretId;\r\n\r\n  const tuning = tunings[instrument] ?? [null, null, null, null, null, null];\r\n  const maxStringIndex = tuning.length - 1;\r\n\r\n  const strings = tuning.map((_, stringIndex) => ({\r\n    gridArea: getGridArea(\r\n      1,\r\n      maxStringIndex - stringIndex,\r\n      maxFretId,\r\n      maxStringIndex - stringIndex,\r\n    ),\r\n    isMuted: mutedStrings.includes((stringIndex + 1) as StringId),\r\n  }));\r\n\r\n  const frets = new Array(maxFretId).fill(undefined).map((_, fretId) => ({\r\n    gridArea: getGridArea(fretId, 0, fretId, maxStringIndex),\r\n    isStart: fretId === 0,\r\n  }));\r\n\r\n  const positions = stringPositionsParts.map(\r\n    ({ startStringId, endStringId, fretId, fingerIndex }) => ({\r\n      gridArea: getGridArea(\r\n        fretId,\r\n        maxStringIndex - (endStringId - 1),\r\n        fretId,\r\n        maxStringIndex - (startStringId - 1),\r\n      ),\r\n      finger: fingerIndex + 1,\r\n    }),\r\n  );\r\n\r\n  const notes = tuning.map((stringNote, stringIndex) => {\r\n    const stringId = (stringIndex + 1) as StringId;\r\n    const isStringMuted = mutedStrings.includes(stringId);\r\n\r\n    return new Array(maxFretId).fill(undefined).map((_, i) => {\r\n      const isActive = !!stringPositionsParts.find(\r\n        ({ startStringId, endStringId, fretId }) =>\r\n          stringId >= startStringId && stringId <= endStringId && i === fretId,\r\n      );\r\n      const note = transposeNote(stringNote, i);\r\n      const [noteName] = getNoteParts(note);\r\n\r\n      return {\r\n        gridArea: getGridArea(i, maxStringIndex - stringIndex),\r\n        isStringMuted,\r\n        isVisible: isActive || i === 0,\r\n        isActive: isActive,\r\n        isPushed: isActive && i !== 0,\r\n        isHighlighted: !disabled && highlightedNote === noteName,\r\n        note,\r\n        noteName,\r\n      };\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Grid\r\n      columns={Array(maxFretId).fill('1fr')}\r\n      rows={Array(maxStringIndex + 1).fill('xxsmall')}\r\n      gap={{ row: 'xxsmall' }}\r\n    >\r\n      {strings.map(({ gridArea, isMuted }) => (\r\n        <Box\r\n          key={gridArea}\r\n          gridArea={gridArea}\r\n          background={!isMuted ? 'background-contrast' : undefined}\r\n          border={[\r\n            {\r\n              side: 'bottom',\r\n              color: 'background-contrast',\r\n              size: 'small',\r\n            },\r\n          ]}\r\n        />\r\n      ))}\r\n\r\n      {frets.map(({ gridArea, isStart }) => (\r\n        <Box\r\n          key={gridArea}\r\n          gridArea={gridArea}\r\n          border={{\r\n            side: 'right',\r\n            color: 'text',\r\n            size: isStart ? 'small' : 'xsmall',\r\n          }}\r\n        />\r\n      ))}\r\n\r\n      {positions.map(({ gridArea, finger }) => (\r\n        <PushedFingerBox\r\n          key={gridArea}\r\n          gridArea={gridArea}\r\n          alignSelf=\"center\"\r\n          background={{ dark: 'border' }}\r\n        />\r\n      ))}\r\n\r\n      {notes.map((s) =>\r\n        s.map(\r\n          ({\r\n            isStringMuted,\r\n            isVisible,\r\n            isActive,\r\n            isPushed,\r\n            isHighlighted,\r\n            note,\r\n            noteName,\r\n            gridArea,\r\n          }) => (\r\n            <NoteBox\r\n              key={gridArea}\r\n              gridArea={gridArea}\r\n              align=\"center\"\r\n              justify=\"center\"\r\n              disabled={disabled}\r\n              isStringMuted={isStringMuted}\r\n              isVisible={isVisible || isHighlighted}\r\n              isActive={isActive || isHighlighted}\r\n              isPushed={isPushed}\r\n              onClick={\r\n                !disabled && onHighlightNote\r\n                  ? () => onHighlightNote(isHighlighted ? undefined : noteName)\r\n                  : undefined\r\n              }\r\n            >\r\n              <NoteCircleText textAlign=\"center\">\r\n                <FormattedNote note={note} />\r\n              </NoteCircleText>\r\n              {isStringMuted && <Close size=\"small\" />}\r\n            </NoteBox>\r\n          ),\r\n        ),\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default StringChord;\r\n","import { Card, CardBody, CardHeader } from 'grommet';\r\nimport { ChordName } from '../../../Theory/chords';\r\nimport { NoteName } from '../../../Theory/notes';\r\nimport ChordDefinition from './ChordDefinition';\r\nimport StringChord from './StringChord';\r\n\r\nexport interface Props {\r\n  chord?: ChordName;\r\n  isEditing?: boolean;\r\n  highlightedNote?: NoteName;\r\n  onRemove?: () => void;\r\n  onHighlightNote?: (noteToSelect: NoteName | undefined) => void;\r\n}\r\n\r\nconst ChordCard = ({\r\n  chord,\r\n  isEditing,\r\n  highlightedNote,\r\n  onRemove,\r\n  onHighlightNote,\r\n}: Props) => (\r\n  <Card background=\"background-back\" width=\"500px\">\r\n    <CardHeader\r\n      background=\"background-contrast\"\r\n      border={{ side: 'bottom', color: 'background-contrast' }}\r\n      justify=\"between\"\r\n    >\r\n      <ChordDefinition\r\n        chord={chord}\r\n        isEditing={isEditing || false}\r\n        onRemove={onRemove}\r\n      />\r\n    </CardHeader>\r\n    <CardBody\r\n      pad=\"small\"\r\n      border={{ side: 'top', color: 'background-contrast' }}\r\n    >\r\n      <StringChord\r\n        chord={chord}\r\n        disabled={isEditing || false}\r\n        highlightedNote={highlightedNote}\r\n        onHighlightNote={onHighlightNote}\r\n      />\r\n    </CardBody>\r\n  </Card>\r\n);\r\n\r\nexport default ChordCard;\r\n","import { Box, Stack, Text } from 'grommet';\r\nimport { Add } from 'grommet-icons';\r\nimport ChordCard from './ChordCard';\r\n\r\nconst EmptyChordCard = () => (\r\n  <Stack fill interactiveChild=\"last\">\r\n    <ChordCard />\r\n    <Box\r\n      fill\r\n      align=\"center\"\r\n      justify=\"center\"\r\n      gap=\"large\"\r\n      background={{ color: 'background', opacity: 'strong' }}\r\n      border={{ color: 'border-semi' }}\r\n    >\r\n      <Add size=\"large\" color=\"accent-1\" />\r\n      <Text size=\"large\" textAlign=\"center\" color=\"accent-1\">\r\n        Add a chord to start\r\n      </Text>\r\n    </Box>\r\n  </Stack>\r\n);\r\n\r\nexport default EmptyChordCard;\r\n","import { Grid } from 'grommet';\r\nimport { useState } from 'react';\r\nimport { ChordName } from '../../../Theory/chords';\r\nimport { NoteName } from '../../../Theory/notes';\r\nimport ChordCard from './ChordCard';\r\nimport EmptyChordCard from './EmptyChordCard';\r\n\r\nexport interface Props {\r\n  chords: ChordName[];\r\n  isEditing: boolean;\r\n  onRemoveChord: (chordToRemove: ChordName) => void;\r\n}\r\n\r\nconst ChordCardCollection = ({ chords, isEditing, onRemoveChord }: Props) => {\r\n  const [highlightedNote, setHighlightedNote] = useState<NoteName>();\r\n\r\n  return (\r\n    <Grid columns=\"medium\" gap=\"small\" justify=\"center\">\r\n      {chords.length !== 0 ? (\r\n        chords.map((c) => (\r\n          <ChordCard\r\n            key={c}\r\n            chord={c}\r\n            isEditing={isEditing}\r\n            highlightedNote={highlightedNote}\r\n            onRemove={() => onRemoveChord(c)}\r\n            onHighlightNote={setHighlightedNote}\r\n          />\r\n        ))\r\n      ) : (\r\n        <EmptyChordCard />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ChordCardCollection;\r\n","import { Collapsible, Select } from 'grommet';\r\nimport { Add } from 'grommet-icons';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport type { ChordName } from '../../../Theory/chords';\r\n\r\nexport interface Props {\r\n  chords: ChordName[];\r\n  isEditing: boolean;\r\n  onAdd: (chordToAdd: ChordName) => void;\r\n}\r\n\r\nconst ChordSelector = ({ chords, isEditing, onAdd }: Props) => {\r\n  const [searchString, setSearchString] = useState('');\r\n\r\n  const matchingChords = useMemo(\r\n    () =>\r\n      chords\r\n        .map((c) => ({ label: c, value: c }))\r\n        .filter((x) =>\r\n          x.label.toLowerCase().includes(searchString.toLowerCase()),\r\n        ),\r\n    [chords, searchString],\r\n  );\r\n\r\n  const handleChange = useCallback(\r\n    ({ value }) => {\r\n      setSearchString('');\r\n      onAdd(value as ChordName);\r\n    },\r\n    [onAdd],\r\n  );\r\n\r\n  return (\r\n    <Collapsible open={isEditing} direction=\"horizontal\">\r\n      <Select\r\n        icon={<Add />}\r\n        options={matchingChords}\r\n        valueKey={{ key: 'value', reduce: true }}\r\n        labelKey={(c) => c.label}\r\n        closeOnChange={false}\r\n        placeholder=\"Add chords\"\r\n        searchPlaceholder=\"Search by name\"\r\n        a11yTitle=\"Select chords to add\"\r\n        onSearch={setSearchString}\r\n        onChange={handleChange}\r\n      />\r\n    </Collapsible>\r\n  );\r\n};\r\n\r\nexport default ChordSelector;\r\n","import { Box, Heading, Keyboard, Text, TextInput } from 'grommet';\r\nimport type { KeyName } from '../../../Theory/keys';\r\n\r\nexport interface Props {\r\n  name: string;\r\n  description: string;\r\n  selectedKey?: KeyName;\r\n  isEditing: boolean;\r\n  onSetName: (newName: string) => void;\r\n  onSetDescription: (newDescription: string) => void;\r\n  onIsEditingChange: (isEditing: boolean) => void;\r\n}\r\n\r\nconst DetailsBox = ({\r\n  name,\r\n  description,\r\n  selectedKey,\r\n  isEditing,\r\n  onSetName,\r\n  onSetDescription,\r\n  onIsEditingChange,\r\n}: Props) => {\r\n  return (\r\n    <Keyboard onEnter={() => onIsEditingChange(false)}>\r\n      <Box width=\"100%\">\r\n        <Box direction=\"row\" align=\"baseline\" gap=\"small\">\r\n          <Heading level={2} size=\"small\" margin={{ vertical: 'small' }}>\r\n            {isEditing ? (\r\n              <TextInput\r\n                plain=\"full\"\r\n                value={name}\r\n                placeholder=\"Enter name\"\r\n                onChange={(event) => onSetName(event.target.value)}\r\n              />\r\n            ) : (\r\n              name || <em>Unnamed chord set</em>\r\n            )}{' '}\r\n          </Heading>\r\n          {selectedKey && !isEditing && (\r\n            <Text size=\"large\">in {selectedKey}</Text>\r\n          )}\r\n        </Box>\r\n        <Text>\r\n          {isEditing ? (\r\n            <TextInput\r\n              plain=\"full\"\r\n              value={description}\r\n              placeholder=\"Enter description\"\r\n              onChange={(event) => onSetDescription(event.target.value)}\r\n            />\r\n          ) : (\r\n            description || <em>No description</em>\r\n          )}\r\n        </Text>\r\n      </Box>\r\n    </Keyboard>\r\n  );\r\n};\r\n\r\nexport default DetailsBox;\r\n","import { Box, Button, Collapsible } from 'grommet';\r\nimport { Checkmark, Edit } from 'grommet-icons';\r\n\r\nexport interface Props {\r\n  isEditing: boolean;\r\n  onIsEditingChange: (isEditing: boolean) => void;\r\n}\r\n\r\nconst EditButton = ({ isEditing, onIsEditingChange }: Props) => (\r\n  <Button\r\n    icon={\r\n      <Box direction=\"row\">\r\n        <Collapsible open={isEditing} direction=\"horizontal\">\r\n          <Checkmark />\r\n        </Collapsible>\r\n        <Collapsible open={!isEditing} direction=\"horizontal\">\r\n          <Edit />\r\n        </Collapsible>\r\n      </Box>\r\n    }\r\n    a11yTitle={isEditing ? 'Done adding/removing chords' : 'Add/remove chords'}\r\n    primary={isEditing}\r\n    onClick={() => onIsEditingChange(!isEditing)}\r\n  />\r\n);\r\n\r\nexport default EditButton;\r\n","import { Collapsible, Select } from 'grommet';\r\nimport { Filter } from 'grommet-icons';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport type { KeyName } from '../../../Theory/keys';\r\n\r\nexport interface Props {\r\n  selectedKey?: KeyName;\r\n  keys: KeyName[];\r\n  isEditing: boolean;\r\n  onChange: (newKey?: KeyName) => void;\r\n}\r\n\r\nconst ChordSelector = ({ selectedKey, keys, isEditing, onChange }: Props) => {\r\n  const [searchString, setSearchString] = useState('');\r\n  const matchingKeys = useMemo(\r\n    () =>\r\n      keys\r\n        .map((k) => ({ label: k, value: k }))\r\n        .filter((x) =>\r\n          x.label.toLowerCase().includes(searchString.toLowerCase()),\r\n        ),\r\n    [keys, searchString],\r\n  );\r\n\r\n  const handleChange = useCallback(\r\n    ({ value }) => {\r\n      setSearchString('');\r\n      console.log('handleChange', value);\r\n\r\n      onChange((value || undefined) as KeyName | undefined);\r\n    },\r\n    [onChange],\r\n  );\r\n\r\n  return (\r\n    <Collapsible open={isEditing} direction=\"horizontal\">\r\n      <Select\r\n        icon={<Filter />}\r\n        value={selectedKey}\r\n        clear={{ label: 'Clear key filter' }}\r\n        options={matchingKeys}\r\n        valueKey={{ key: 'value', reduce: true }}\r\n        labelKey={(c) => c.label}\r\n        placeholder=\"Filter by key\"\r\n        searchPlaceholder=\"Search by name\"\r\n        a11yTitle=\"Filter chords by key\"\r\n        onSearch={setSearchString}\r\n        onChange={handleChange}\r\n      />\r\n    </Collapsible>\r\n  );\r\n};\r\n\r\nexport default ChordSelector;\r\n","import { Box, Keyboard } from 'grommet';\r\nimport { useState } from 'react';\r\nimport type { ChordName } from '../../../Theory/chords';\r\nimport type { KeyName } from '../../../Theory/keys';\r\nimport ChordCardCollection from './ChordCardCollection';\r\nimport ChordSelector from './ChordSelector';\r\nimport DetailsBox from './DetailsBox';\r\nimport EditButton from './EditButton';\r\nimport KeySelector from './KeySelector';\r\n\r\nexport interface Props {\r\n  name: string;\r\n  description: string;\r\n  selectedKey?: KeyName;\r\n  selectedChords: ChordName[];\r\n  availableKeys: KeyName[];\r\n  filteredChords: ChordName[];\r\n  onSetName: (newName: string) => void;\r\n  onSetDescription: (newDescription: string) => void;\r\n  onSetKey: (newKey?: KeyName) => void;\r\n  onAddChord: (chordToAdd: ChordName) => void;\r\n  onRemoveChord: (chordToRemove: ChordName) => void;\r\n}\r\n\r\nconst ChordSetPage = ({\r\n  name,\r\n  description,\r\n  selectedKey,\r\n  selectedChords,\r\n  availableKeys,\r\n  filteredChords,\r\n  onSetName,\r\n  onSetDescription,\r\n  onSetKey,\r\n  onAddChord,\r\n  onRemoveChord,\r\n}: Props) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  return (\r\n    <Keyboard onEsc={() => setIsEditing(false)}>\r\n      <Box gap=\"medium\">\r\n        <Box direction=\"row\" align=\"start\" gap=\"small\">\r\n          <DetailsBox\r\n            name={name}\r\n            description={description}\r\n            selectedKey={selectedKey}\r\n            isEditing={isEditing}\r\n            onSetName={onSetName}\r\n            onSetDescription={onSetDescription}\r\n            onIsEditingChange={setIsEditing}\r\n          />\r\n          <Box\r\n            direction=\"row\"\r\n            justify=\"end\"\r\n            align=\"center\"\r\n            gap=\"small\"\r\n            width=\"100%\"\r\n          >\r\n            <KeySelector\r\n              selectedKey={selectedKey}\r\n              keys={availableKeys}\r\n              isEditing={isEditing}\r\n              onChange={onSetKey}\r\n            />\r\n            <ChordSelector\r\n              chords={filteredChords}\r\n              isEditing={isEditing}\r\n              onAdd={onAddChord}\r\n            />\r\n            <EditButton\r\n              isEditing={isEditing}\r\n              onIsEditingChange={setIsEditing}\r\n            />\r\n          </Box>\r\n        </Box>\r\n        <ChordCardCollection\r\n          chords={selectedChords}\r\n          isEditing={isEditing}\r\n          onRemoveChord={onRemoveChord}\r\n        />\r\n      </Box>\r\n    </Keyboard>\r\n  );\r\n};\r\n\r\nexport default ChordSetPage;\r\n","import type { Dispatch } from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport * as actions from '../../Store/actions';\r\nimport * as selectors from '../../Store/selectors';\r\nimport { getAllKeys } from '../../Theory/keys';\r\nimport NotFoundPage from '../NotFoundPage';\r\nimport type { PageProps } from '../Types';\r\nimport ChordSetPage from './Components/ChordSetPage';\r\n\r\nconst useChordSetDispatch = <T extends Array<unknown>>(\r\n  action: (chordSetIndex: number, ...args: [...T]) => actions.Action,\r\n  dispatch: Dispatch<actions.Action>,\r\n  chordSetIndex: number,\r\n) =>\r\n  useCallback(\r\n    (...args: [...T]) => dispatch(action(chordSetIndex, ...args)),\r\n    [action, chordSetIndex, dispatch],\r\n  );\r\n\r\nconst ChordSetPageContainer = ({ state, dispatch }: PageProps) => {\r\n  const { chordSetId } = useParams();\r\n  const chordSetIndex = Number.parseInt(chordSetId!);\r\n\r\n  const allKeys = getAllKeys();\r\n  const chordSet = selectors.getChordSet(chordSetIndex)(state);\r\n  const filteredChords = selectors.getFilteredChords(chordSetIndex)(state);\r\n\r\n  const handleSetName = useChordSetDispatch(\r\n    actions.setChordSetName,\r\n    dispatch,\r\n    chordSetIndex,\r\n  );\r\n\r\n  const handleSetDescription = useChordSetDispatch(\r\n    actions.setChordSetDescription,\r\n    dispatch,\r\n    chordSetIndex,\r\n  );\r\n\r\n  const handleSetKey = useChordSetDispatch(\r\n    actions.setChordSetKey,\r\n    dispatch,\r\n    chordSetIndex,\r\n  );\r\n\r\n  const handleAddChord = useChordSetDispatch(\r\n    actions.addChordToSet,\r\n    dispatch,\r\n    chordSetIndex,\r\n  );\r\n\r\n  const handleRemoveChord = useChordSetDispatch(\r\n    actions.removeChordFromSet,\r\n    dispatch,\r\n    chordSetIndex,\r\n  );\r\n\r\n  if (!chordSet || !filteredChords) {\r\n    return <NotFoundPage />;\r\n  }\r\n\r\n  const { name, description, selectedKey, selectedChords } = chordSet;\r\n  return (\r\n    <ChordSetPage\r\n      name={name}\r\n      description={description}\r\n      selectedKey={selectedKey}\r\n      selectedChords={selectedChords}\r\n      availableKeys={allKeys}\r\n      filteredChords={filteredChords}\r\n      onSetName={handleSetName}\r\n      onSetDescription={handleSetDescription}\r\n      onSetKey={handleSetKey}\r\n      onAddChord={handleAddChord}\r\n      onRemoveChord={handleRemoveChord}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ChordSetPageContainer;\r\n","import { Card, Text } from 'grommet';\r\nimport FormattedChord from '../../../Components/FormattedChord';\r\nimport { ChordName } from '../../../Theory/chords';\r\n\r\nexport interface Props {\r\n  chord?: ChordName;\r\n}\r\n\r\nconst ChordBadge = ({ chord }: Props) => (\r\n  <Card\r\n    background=\"background-front\"\r\n    pad={{ horizontal: 'xsmall', vertical: 'xxsmall' }}\r\n  >\r\n    <Text size=\"medium\" color=\"accent-1\">\r\n      <FormattedChord chord={chord} />\r\n    </Text>\r\n  </Card>\r\n);\r\n\r\nexport default ChordBadge;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Collapsible,\r\n  Heading,\r\n  Keyboard,\r\n} from 'grommet';\r\nimport { Checkmark, Close, Trash } from 'grommet-icons';\r\nimport { useState } from 'react';\r\nimport Link from '../../../Components/Link';\r\nimport type { ChordName } from '../../../Theory/chords';\r\nimport ChordBadge from './ChordBadge';\r\n\r\nexport interface Props {\r\n  chordSetIndex?: number;\r\n  name?: string;\r\n  description?: string;\r\n  selectedChords?: ChordName[];\r\n  onRemove?: () => void;\r\n}\r\n\r\nconst ChordSetCard = ({\r\n  chordSetIndex = -1,\r\n  name = '',\r\n  description = '',\r\n  selectedChords = [],\r\n  onRemove,\r\n}: Props) => {\r\n  const [isRemoving, setIsRemoving] = useState(false);\r\n\r\n  return (\r\n    <Keyboard onEsc={() => setIsRemoving(false)}>\r\n      <Card\r\n        background=\"background-back\"\r\n        fill\r\n        border={{ color: 'border-brand' }}\r\n      >\r\n        <CardHeader\r\n          pad=\"small\"\r\n          background=\"background-contrast\"\r\n          border={{ side: 'bottom', color: 'background-contrast' }}\r\n        >\r\n          <Link to={`/chord-sets/${chordSetIndex}`}>\r\n            <Heading level={3} size=\"small\" margin=\"none\" color=\"brand\">\r\n              {name || <em>Unnamed chord set</em>}\r\n            </Heading>\r\n          </Link>\r\n          <Box direction=\"row\" gap=\"small\" justify=\"end\" align=\"center\">\r\n            <Collapsible open={isRemoving} direction=\"horizontal\">\r\n              <Button\r\n                icon={<Close />}\r\n                a11yTitle={`Cancel removing chord set ${name}`}\r\n                onClick={() => setIsRemoving(false)}\r\n              />\r\n            </Collapsible>\r\n            <Button\r\n              icon={\r\n                <Box direction=\"row\">\r\n                  <Collapsible open={isRemoving} direction=\"horizontal\">\r\n                    <Checkmark />\r\n                  </Collapsible>\r\n                  <Collapsible open={!isRemoving} direction=\"horizontal\">\r\n                    <Trash />\r\n                  </Collapsible>\r\n                </Box>\r\n              }\r\n              a11yTitle={\r\n                isRemoving\r\n                  ? `Confirm removing chord set ${name}`\r\n                  : `Remove chord set ${name}`\r\n              }\r\n              primary={isRemoving}\r\n              onClick={() => {\r\n                if (isRemoving && onRemove) {\r\n                  onRemove();\r\n                }\r\n\r\n                setIsRemoving(!isRemoving);\r\n              }}\r\n            />\r\n          </Box>\r\n        </CardHeader>\r\n        <CardBody\r\n          pad=\"small\"\r\n          gap=\"small\"\r\n          border={{ side: 'top', color: 'background-contrast' }}\r\n        >\r\n          {description || <em>No description</em>}\r\n          <Box direction=\"row\" align=\"start\" wrap gap=\"xsmall\">\r\n            {selectedChords.map((c) => (\r\n              <ChordBadge key={c} chord={c} />\r\n            ))}\r\n          </Box>\r\n        </CardBody>\r\n      </Card>\r\n    </Keyboard>\r\n  );\r\n};\r\n\r\nexport default ChordSetCard;\r\n","import { Box, Stack, Text } from 'grommet';\r\nimport { Add } from 'grommet-icons';\r\nimport ChordSetCard from './ChordSetCard';\r\n\r\nconst EmptyChordSetCard = () => (\r\n  <Stack fill interactiveChild=\"last\">\r\n    <ChordSetCard />\r\n    <Box\r\n      fill\r\n      align=\"center\"\r\n      justify=\"center\"\r\n      gap=\"medium\"\r\n      height={{ min: '150px' }}\r\n      background={{ color: 'background', opacity: 'strong' }}\r\n      border={{ color: 'border-brand-semi' }}\r\n    >\r\n      <Add size=\"large\" color=\"accent-1\" />\r\n      <Text size=\"large\" textAlign=\"center\" color=\"accent-1\">\r\n        Add your first chord set\r\n      </Text>\r\n    </Box>\r\n  </Stack>\r\n);\r\n\r\nexport default EmptyChordSetCard;\r\n","import { Grid } from 'grommet';\r\nimport type { ChordSet as ChordSetType } from '../../../Store/Types/State';\r\nimport ChordSetCard from './ChordSetCard';\r\nimport EmptyChordSetCard from './EmptyChordSetCard';\r\n\r\nexport interface Props {\r\n  chordSets: ChordSetType[];\r\n  onRemoveChordSet: (chordSetToRemoveIndex: number) => void;\r\n}\r\n\r\nconst ChordSetCardCollection = ({ chordSets, onRemoveChordSet }: Props) => (\r\n  <Grid columns=\"medium\" gap=\"small\" justify=\"center\">\r\n    {chordSets.length !== 0 ? (\r\n      chordSets.map(({ name, description, selectedChords }, i) => (\r\n        <ChordSetCard\r\n          key={i}\r\n          chordSetIndex={i}\r\n          name={name}\r\n          description={description}\r\n          selectedChords={selectedChords}\r\n          onRemove={() => onRemoveChordSet(i)}\r\n        />\r\n      ))\r\n    ) : (\r\n      <EmptyChordSetCard />\r\n    )}\r\n  </Grid>\r\n);\r\n\r\nexport default ChordSetCardCollection;\r\n","import { Box, Button, Heading, Text } from 'grommet';\r\nimport { Add } from 'grommet-icons';\r\nimport type { ChordSet as ChordSetType } from '../../../Store/Types/State';\r\nimport ChordSetCardCollection from './ChordSetCardCollection';\r\n\r\nexport interface Props {\r\n  chordSets: ChordSetType[];\r\n  onAddChordSet: () => void;\r\n  onRemoveChordSet: (chordSetToRemoveIndex: number) => void;\r\n}\r\n\r\nconst ChordSetsPage = ({\r\n  chordSets,\r\n  onAddChordSet,\r\n  onRemoveChordSet,\r\n}: Props) => (\r\n  <Box gap=\"medium\">\r\n    <Box direction=\"row\" align=\"start\" gap=\"small\">\r\n      <Box width=\"100%\">\r\n        <Heading level={2} size=\"small\" margin={{ vertical: 'small' }}>\r\n          My chord sets\r\n        </Heading>\r\n        <Text>My favourite song compositions.</Text>\r\n      </Box>\r\n      <Button\r\n        icon={<Add />}\r\n        a11yTitle=\"Add new chord set\"\r\n        onClick={onAddChordSet}\r\n      />\r\n    </Box>\r\n    <ChordSetCardCollection\r\n      chordSets={chordSets}\r\n      onRemoveChordSet={onRemoveChordSet}\r\n    />\r\n  </Box>\r\n);\r\n\r\nexport default ChordSetsPage;\r\n","import { useCallback } from 'react';\r\nimport * as actions from '../../Store/actions';\r\nimport * as selectors from '../../Store/selectors';\r\nimport type { PageProps } from '../Types';\r\nimport ChordSetsPage from './Components/ChordSetsPage';\r\n\r\nconst ChordSetsPageContainer = ({ state, dispatch }: PageProps) => {\r\n  const chordSets = selectors.getChordSets(state);\r\n\r\n  const handleAddChordSet = useCallback(\r\n    () => dispatch(actions.addChordSet()),\r\n    [dispatch],\r\n  );\r\n\r\n  const handleRemoveChordSet = useCallback(\r\n    (chordSetToRemoveIndex) =>\r\n      dispatch(actions.removeChordSet(chordSetToRemoveIndex)),\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <ChordSetsPage\r\n      chordSets={chordSets}\r\n      onAddChordSet={handleAddChordSet}\r\n      onRemoveChordSet={handleRemoveChordSet}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ChordSetsPageContainer;\r\n","import type { StoredState } from '../Hooks/useStoringReducer';\r\nimport type {\r\n  StateVersion0,\r\n  StateVersion1,\r\n  StateVersion2,\r\n} from './Types/State';\r\n\r\nconst migrateFrom0To1 = (state: StateVersion0): StateVersion1 => ({\r\n  version: 1,\r\n  ...state,\r\n});\r\n\r\nconst migrateFrom1To2 = ({\r\n  version,\r\n  ...rest\r\n}: StateVersion1): StateVersion2 => ({\r\n  version: 2,\r\n  chordSets: [{ name: '', description: '', ...rest }],\r\n});\r\n\r\nconst migrations: StoredState = [migrateFrom0To1, migrateFrom1To2];\r\n\r\nexport default migrations;\r\n","import type { Reducer } from 'react';\r\nimport { StoredState } from '../Hooks/useStoringReducer';\r\nimport type { Action } from './actions';\r\nimport migrations from './migrations';\r\nimport type { ChordSet, State } from './Types/State';\r\n\r\nexport const initialState: State = {\r\n  version: 2,\r\n  chordSets: [\r\n    {\r\n      name: 'Example: Leaving on a Jet Plane',\r\n      description: \"Example chordset for John Denver's Leaving on a Jet Plane\",\r\n      selectedChords: ['G', 'C', 'D'],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const migrateState = (state: StoredState): State => {\r\n  const { version } = state;\r\n\r\n  for (let i = version ?? 0; i < initialState.version; i++) {\r\n    const migration = migrations[i];\r\n    state = migration(state);\r\n    console.log(`Migrated from version ${i} → ${i + 1}`, state);\r\n  }\r\n\r\n  return state as State;\r\n};\r\n\r\nconst reducer: Reducer<State, Action> = (state, action) => {\r\n  switch (action.type) {\r\n    case 'addChordSet':\r\n      return {\r\n        ...state,\r\n        chordSets: [\r\n          ...state.chordSets,\r\n          {\r\n            name: '',\r\n            description: '',\r\n            selectedChords: [],\r\n          },\r\n        ],\r\n      };\r\n\r\n    case 'removeChordSet': {\r\n      const { chordSetToRemoveIndex } = action;\r\n      const { chordSets } = state;\r\n      return chordSets[chordSetToRemoveIndex]\r\n        ? {\r\n            ...state,\r\n            chordSets: chordSets.filter((_, i) => i !== chordSetToRemoveIndex),\r\n          }\r\n        : state;\r\n    }\r\n\r\n    case 'setChordSetName':\r\n    case 'setChordSetDescription':\r\n    case 'setChordSetKey':\r\n    case 'addChordToSet':\r\n    case 'removeChordFromSet': {\r\n      const { chordSetIndex } = action;\r\n      const { chordSets } = state;\r\n      const newChordSet = chordSetReducer(\r\n        state.chordSets[chordSetIndex],\r\n        action,\r\n      );\r\n      return chordSets[chordSetIndex] &&\r\n        newChordSet !== chordSets[chordSetIndex]\r\n        ? {\r\n            ...state,\r\n            chordSets: chordSets.map((chordSet, i) =>\r\n              i === chordSetIndex ? newChordSet : chordSet,\r\n            ),\r\n          }\r\n        : state;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst chordSetReducer: Reducer<ChordSet, Action> = (state, action) => {\r\n  switch (action.type) {\r\n    case 'setChordSetName':\r\n      return {\r\n        ...state,\r\n        name: action.newName,\r\n      };\r\n\r\n    case 'setChordSetDescription':\r\n      return {\r\n        ...state,\r\n        description: action.newDescription,\r\n      };\r\n\r\n    case 'setChordSetKey':\r\n      return {\r\n        ...state,\r\n        selectedKey: action.newKey,\r\n      };\r\n\r\n    case 'addChordToSet': {\r\n      const { chordToAdd } = action;\r\n      const { selectedChords } = state;\r\n      return !selectedChords.find((c) => c === chordToAdd)\r\n        ? {\r\n            ...state,\r\n            selectedChords: [...selectedChords, chordToAdd],\r\n          }\r\n        : state;\r\n    }\r\n\r\n    case 'removeChordFromSet': {\r\n      const { chordToRemove } = action;\r\n      const { selectedChords } = state;\r\n      return selectedChords.find((c) => c === chordToRemove)\r\n        ? {\r\n            ...state,\r\n            selectedChords: selectedChords.filter((c) => c !== chordToRemove),\r\n          }\r\n        : state;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { grommet } from 'grommet/themes';\r\nimport { deepMerge } from 'grommet/utils';\r\n\r\n// https://www.shutterstock.com/blog/art-deco-graphic-design-techniques\r\nconst goldColor = '#d1ad70'; // gold\r\nconst aquamarineColor = '#87ccb0'; // aquamarine\r\n// const turquoiseColor = '#91d4cf'; // light turquoise\r\nconst navyBlueColorColor = '#15173d'; // navy blue\r\n\r\nconst theme = deepMerge(grommet, {\r\n  global: {\r\n    colors: {\r\n      background: '#010115', // x-darker navy blue\r\n      'background-back': {\r\n        dark: '#080920', // darker navy blue\r\n        // light: '#EDEDED',\r\n      },\r\n      'background-front': {\r\n        dark: navyBlueColorColor,\r\n        // light: '#FFFFFF',\r\n      },\r\n      'background-contrast': {\r\n        dark: '#3f438a17',\r\n        // light: '#33333310',\r\n      },\r\n\r\n      black: '#00010d', // almost black navy blue\r\n      white: '#fff9ef', // almost white gold\r\n\r\n      brand: aquamarineColor,\r\n      'accent-1': goldColor,\r\n\r\n      border: {\r\n        dark: `${goldColor}80`,\r\n      },\r\n      'border-semi': {\r\n        dark: `${goldColor}40`,\r\n      },\r\n\r\n      'border-brand': {\r\n        dark: `${aquamarineColor}80`,\r\n      },\r\n      'border-brand-semi': {\r\n        dark: `${aquamarineColor}40`,\r\n      },\r\n    },\r\n\r\n    font: {\r\n      family: '\"Josefin Sans\"',\r\n      face:\r\n        \"/* vietnamese */\\n@font-face {\\n  font-family: 'Josefin Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/josefinsans/v17/Qw3PZQNVED7rKGKxtqIqX5E-AVSJrOCfjY46_DjQbMlhLzTs.woff2) format('woff2');\\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Josefin Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/josefinsans/v17/Qw3PZQNVED7rKGKxtqIqX5E-AVSJrOCfjY46_DjQbMhhLzTs.woff2) format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Josefin Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/josefinsans/v17/Qw3PZQNVED7rKGKxtqIqX5E-AVSJrOCfjY46_DjQbMZhLw.woff2) format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n\" +\r\n        \"/* latin-ext */\\n@font-face {\\n  font-family: 'Limelight';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/limelight/v11/XLYkIZL7aopJVbZJHDuoNOlHnnY.woff2) format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Limelight';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/limelight/v11/XLYkIZL7aopJVbZJHDuoOulH.woff2) format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Limelight';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/limelight/v11/XLYkIZL7aopJVbZJHDuoNOlHnnY.woff2) format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Limelight';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/limelight/v11/XLYkIZL7aopJVbZJHDuoOulH.woff2) format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n\",\r\n    },\r\n  },\r\n\r\n  heading: {\r\n    font: {\r\n      family: '\"Limelight\"',\r\n    },\r\n  },\r\n\r\n  button: {\r\n    border: {\r\n      radius: '3px',\r\n    },\r\n  },\r\n\r\n  card: {\r\n    container: {\r\n      border: 'solid',\r\n      round: 'xxsmall',\r\n      elevation: null,\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import { Footer, Grommet, Header, Heading, Main, Text } from 'grommet';\r\nimport React from 'react';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport './App.css';\r\nimport Link from './Components/Link';\r\nimport useStoringReducer from './Hooks/useStoringReducer';\r\nimport ChordSetPage from './Pages/ChordSetPage';\r\nimport ChordSetsPage from './Pages/ChordSetsPage';\r\nimport NotFoundPage from './Pages/NotFoundPage';\r\nimport reducer, { initialState, migrateState } from './Store/reducer';\r\nimport theme from './theme';\r\n\r\nconst applicationStateStorageKey = 'applicationState';\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useStoringReducer(\r\n    applicationStateStorageKey,\r\n    reducer,\r\n    migrateState,\r\n    initialState,\r\n  );\r\n\r\n  return (\r\n    <Grommet full theme={theme} themeMode=\"dark\">\r\n      <Header\r\n        pad={{ vertical: 'medium', horizontal: 'large' }}\r\n        background=\"brand\"\r\n      >\r\n        <Heading size=\"small\" margin=\"none\">\r\n          <Link to=\"/\">Chord Helper</Link>\r\n        </Heading>\r\n      </Header>\r\n      <Main pad=\"large\" fill>\r\n        <Routes>\r\n          <Route\r\n            path=\"/\"\r\n            element={<ChordSetsPage state={state} dispatch={dispatch} />}\r\n          ></Route>\r\n          <Route\r\n            path=\"chord-sets/:chordSetId\"\r\n            element={<ChordSetPage state={state} dispatch={dispatch} />}\r\n          />\r\n          <Route path=\"*\" element={<NotFoundPage />} />\r\n        </Routes>\r\n      </Main>\r\n      <Footer\r\n        pad={{ vertical: 'small', horizontal: 'large' }}\r\n        background=\"black\"\r\n        justify=\"center\"\r\n      >\r\n        <Text color=\"text-xweak\">Helping you with chords since 2021.</Text>\r\n      </Footer>\r\n    </Grommet>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename=\"chord-helper\">\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}